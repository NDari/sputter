// Code generated by go-bindata.
// sources:
// docstring/async.md
// docstring/future.md
// docstring/promise.md
// DO NOT EDIT!

package docstring

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docstringAsyncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6e\xc3\x20\x14\x44\xf7\x9c\x62\x94\x6e\xec\x4a\xcd\x01\xba\x6f\x0f\xd0\x13\xf8\x0b\xc6\x31\x12\xe1\x3b\xf0\x49\xe2\xdb\x57\xd0\x2e\xda\xed\x30\xbc\x37\xfa\x2f\x98\xa4\x1e\xd9\x63\xd5\x72\x7d\x9d\x71\x61\x66\x11\x63\x85\x64\x8c\x97\xad\x68\xd6\x56\x51\x79\x6b\xcc\x9e\xce\x7d\xdc\x25\xb5\xd1\xb1\x8d\xa8\x3b\x7d\x5c\x23\xc3\x40\x54\xc4\x0c\x41\xe5\x2e\x1d\x03\xdb\x0a\x25\x40\x57\xf0\x49\xdf\x2c\x6a\x3e\xbb\x2f\x5a\x2b\xb9\x8e\xde\x0f\x14\xb6\x89\xe1\x11\x53\x42\xb4\x31\x00\x7a\x67\x81\xe4\xa3\xff\xed\x9e\x2e\x1d\x4a\x31\x27\x85\xe0\x35\x9a\x31\xa0\xd5\x98\x2f\x10\x24\xf5\x92\xd2\x81\xea\x75\xef\x63\x5a\xf6\xdd\x86\x9e\x32\x60\xe9\xfd\xe5\xec\x3e\xb5\x80\x4f\xb9\xee\x89\xef\xce\x2d\xcb\xe2\xa6\xc0\x15\x52\x79\xfb\x3d\x85\x03\x80\xa9\xd7\x71\x2a\x0c\xa7\xf9\x6f\xa0\x45\xf2\x85\xff\xb3\x83\x29\xe9\xe3\x34\xbb\x79\x76\x6e\x32\x7d\xbb\xd3\x9b\x96\xc1\x9c\x87\xe2\x3b\x00\x00\xff\xff\x6f\x61\x4d\xbd\x66\x01\x00\x00")

func docstringAsyncMdBytes() ([]byte, error) {
	return bindataRead(
		_docstringAsyncMd,
		"docstring/async.md",
	)
}

func docstringAsyncMd() (*asset, error) {
	bytes, err := docstringAsyncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docstring/async.md", size: 358, mode: os.FileMode(420), modTime: time.Unix(1491238999, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docstringFutureMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xd1\x6d\xf3\x30\x0c\x84\xdf\x35\xc5\x21\xff\x8b\x0d\xfc\xcd\x00\x1d\xa0\x03\x14\x1d\x20\x8c\x44\xd7\x42\x19\xd1\x90\x28\x27\xde\xbe\x90\x1c\xb8\x40\xab\xc7\xef\x74\x77\x24\xff\x61\x98\xaa\xd5\xcc\x98\x34\xdf\x46\xf0\x4a\x52\xc9\xb8\x80\x3a\x01\x95\x2d\xf9\x39\x6b\xd2\x5a\x64\x73\xee\x9d\xad\xe6\xd4\xe5\xdd\x17\x13\x6c\xde\xed\xd0\xa9\xf3\xe4\x2d\x6a\x3a\x03\x1f\x33\x63\xc9\xba\xc6\xc0\xa1\xff\x70\xf7\x28\x82\x2b\x1f\x3d\xa1\xf9\x09\x85\x17\xca\x64\x0c\x9b\x33\x53\x68\x41\xfc\x60\x5f\x5b\xce\x7f\x50\x0a\xa0\xb4\xc1\x93\x48\x71\xa6\x7b\xe1\xb3\x06\x7b\xa4\xa8\xff\x42\x4d\x16\xe5\x67\x9c\x99\x0a\xae\xcc\x09\x5e\x6f\x8b\xb0\xb1\x6c\xee\x28\x3e\x03\x6f\x9a\xc1\x0f\x6a\xda\xab\x73\x97\xcb\xc5\x0d\x81\xa7\xb6\xd8\x71\x95\x21\xa8\x03\x80\xc1\xf4\x65\x65\x6f\x9a\x31\xf4\x93\x74\xda\x15\xbe\x45\xc3\x29\x73\x38\x8d\xbf\xa1\x66\x4a\x9f\xfc\x97\x6f\x2c\xa2\xf7\x27\x1f\xdb\x73\xae\x35\x8e\x7d\x88\xef\x00\x00\x00\xff\xff\x92\x87\xe5\xa2\x94\x01\x00\x00")

func docstringFutureMdBytes() ([]byte, error) {
	return bindataRead(
		_docstringFutureMd,
		"docstring/future.md",
	)
}

func docstringFutureMd() (*asset, error) {
	bytes, err := docstringFutureMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docstring/future.md", size: 404, mode: os.FileMode(420), modTime: time.Unix(1491236732, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docstringPromiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4d\x4e\x03\x31\x0c\x85\xf7\x39\xc5\x53\xd9\xb4\x52\xd5\x03\xb0\x63\x83\xc4\x96\x13\xd4\x4d\x3c\x1d\x0b\x8f\x1d\xa5\x4e\x07\x6e\x8f\x82\x98\x22\x76\x96\xde\x8f\x3f\xfb\x09\xfb\xda\x7c\x91\x1b\x1f\x50\x9b\x97\x9e\xf9\x06\x42\x76\x0b\xb1\x4e\x21\x6e\x58\xdc\xa8\xa4\xf4\xce\xd1\x9b\x0d\xf5\x37\x01\x31\xc4\xcc\x98\xbc\x2d\xf0\x09\x84\xa9\x5b\x1e\x91\x13\xf0\x36\x81\x6a\x55\xe1\x82\x55\x62\xf6\x1e\x20\x4b\xd4\xae\x7d\x61\x8b\x23\x62\x96\xdb\xc3\x8f\x55\x54\x71\x51\xcf\x1f\x47\xac\x24\x21\x76\x1d\xb5\x20\xdc\x49\x3b\x23\x1c\x17\x46\x61\x95\x3b\x37\x2e\xe9\x2e\x34\x28\x49\x75\x48\x03\x62\x63\x7a\x54\xc6\x4c\x01\xb1\xac\xbd\x8c\x93\x0c\xdb\xee\x13\xf0\x92\x36\x7b\x26\x83\x9b\x7e\xfd\xab\x87\x5b\xe6\x13\xf0\xea\x0d\xfc\x49\x4b\x55\x7e\x4e\xe9\x7c\x3e\xa7\x7d\xe1\x09\xf5\xef\x67\x87\xb4\xaf\xd8\xcd\xac\xea\xbb\x31\x1f\x7e\x5c\xdf\x01\x00\x00\xff\xff\x6c\x36\x7a\x41\x55\x01\x00\x00")

func docstringPromiseMdBytes() ([]byte, error) {
	return bindataRead(
		_docstringPromiseMd,
		"docstring/promise.md",
	)
}

func docstringPromiseMd() (*asset, error) {
	bytes, err := docstringPromiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docstring/promise.md", size: 341, mode: os.FileMode(420), modTime: time.Unix(1491236817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docstring/async.md":   docstringAsyncMd,
	"docstring/future.md":  docstringFutureMd,
	"docstring/promise.md": docstringPromiseMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docstring": &bintree{nil, map[string]*bintree{
		"async.md":   &bintree{docstringAsyncMd, map[string]*bintree{}},
		"future.md":  &bintree{docstringFutureMd, map[string]*bintree{}},
		"promise.md": &bintree{docstringPromiseMd, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
