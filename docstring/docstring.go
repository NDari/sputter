// Code generated by go-bindata.
// sources:
// docstring/async.md
// docstring/future.md
// docstring/promise.md
// DO NOT EDIT!

package docstring

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _asyncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x6e\xeb\x30\x0c\x44\xf7\x3a\xc5\x20\xab\xf8\x03\x3f\x07\xe8\xbe\x3d\x40\x4f\x10\x42\x1e\xc7\x02\x14\xd2\x91\xa8\x24\xbe\x7d\x21\x25\xab\x76\xfb\x38\x9c\x47\x30\x1c\xa5\xee\x1a\xb1\x58\xb9\xfe\x9b\x70\xa1\xb2\x88\xb3\x42\x14\x63\xb2\x16\x53\x6b\x15\x95\xb7\x46\x8d\x0c\xe1\xf3\x2e\xb9\x8d\x8c\xaf\x44\xdd\x18\xd3\x92\x38\x8f\x8a\x8a\xa4\x10\x54\x6e\xd2\x6b\xe0\x6b\xa1\xcc\xb0\x05\x7c\x32\x36\x4f\xa6\xa7\xf0\x4d\x6f\x45\xeb\xc8\xbd\x4a\xe1\xab\x38\x1e\x29\x67\x24\x1f\x07\xc0\xee\x2c\x10\xdd\xfb\x6e\xf7\x74\xe9\x50\x8a\x07\x29\x04\xaf\xc9\x9d\x33\x5a\x4d\x7a\x81\x20\x5b\x94\x9c\x77\xd4\x68\x5b\x3f\xa6\x69\xec\x36\x74\xca\x19\xe7\x9e\x3f\x9f\xc2\x97\x15\xf0\x29\xd7\x2d\xf3\x23\x04\x00\x38\xce\x5c\x20\x95\x37\xbc\x5e\x31\xe0\x18\xf4\x15\x1c\x0a\xe7\xc3\xf4\x1b\x5a\x11\xbd\xf0\x2f\xdf\x99\xb3\x3d\xde\x7c\x9a\xde\x06\xb7\xff\x77\x46\xb7\x32\x3c\x53\xf8\x09\x00\x00\xff\xff\x24\x80\x8e\xb2\x75\x01\x00\x00")

func asyncMdBytes() ([]byte, error) {
	return bindataRead(
		_asyncMd,
		"async.md",
	)
}

func asyncMd() (*asset, error) {
	bytes, err := asyncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "async.md", size: 373, mode: os.FileMode(420), modTime: time.Unix(1491287264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _futureMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xd1\x6d\xc3\x30\x0c\x44\xff\x35\xc5\x21\x5f\x36\xd0\x66\x80\x0e\xd0\x01\x8a\x2e\xc0\x48\x74\x2d\x94\x11\x0d\x89\x72\xe2\xed\x0b\xc9\xa9\xdb\x8f\xe8\x93\x4f\x77\x47\x9e\x1b\xa6\x6a\x35\x33\x26\xcd\xd7\x11\xbc\x92\x54\x32\x2e\xa0\x3e\x01\x95\x2d\xf9\x39\x6b\xd2\x5a\x64\x73\xee\x83\xad\xe6\xd4\xf1\xae\x8b\x09\x36\xef\x72\xe8\xd4\xe7\xc9\x5b\xd4\x74\x06\x3e\x67\xc6\x92\x75\x8d\x81\x43\xff\xe1\x6e\x51\x04\x17\x3e\x72\x42\xd3\x13\x0a\x2f\x94\xc9\x18\x36\x67\xa6\xd0\x8c\xf8\xce\xbe\x36\x9f\x17\x50\x0a\xa0\xb4\xc1\x93\x48\x71\xa6\x7b\xe0\x23\x06\xbb\xa5\xa8\xff\x46\x4d\x16\xe5\x6f\x9d\x99\x0a\x2e\xcc\x09\x5e\xaf\x8b\xb0\xb1\x6c\xee\x08\x3e\x03\xef\x9a\xc1\x77\x6a\xec\xcd\x39\x00\x18\x02\x4f\xed\x30\xfc\xb6\x32\x04\xed\xa0\x43\xd3\xd7\x95\xbd\x69\xc6\xd0\x6b\x39\x48\xa7\x7c\x8d\x86\x53\xe6\x70\x1a\x9f\x01\xcd\x94\xbe\xf8\x39\xdb\x58\x44\x6f\xff\xd8\xd8\xde\x63\xa5\xa9\xda\xe8\x7e\x02\x00\x00\xff\xff\x25\x91\x59\xcb\xa7\x01\x00\x00")

func futureMdBytes() ([]byte, error) {
	return bindataRead(
		_futureMd,
		"future.md",
	)
}

func futureMd() (*asset, error) {
	bytes, err := futureMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "future.md", size: 423, mode: os.FileMode(420), modTime: time.Unix(1491287275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3d\x6e\xc3\x30\x0c\x85\x77\x9d\xe2\x21\x53\x02\x04\x39\x40\xb7\x2e\x05\xba\xf6\x06\x8c\x44\xc7\x44\x69\x52\x50\x28\xbb\xbd\x7d\x21\xb4\x36\xd0\x51\x7a\x3f\xfc\xc8\x74\xae\xcd\x17\x79\xf2\x05\xb5\x79\xe9\x99\x9f\x20\x64\xb7\x10\xeb\x14\xe2\x86\xc5\x8d\x4a\x4a\x1f\x1c\xbd\xd9\x50\xff\x12\x10\x43\xcc\x8c\xc9\xdb\x02\x9f\x40\x98\xba\xe5\x11\xb9\x01\xef\x13\xa8\x56\x15\x2e\xd8\x24\x66\xef\x01\xb2\x44\xed\xd1\x17\xb6\xb8\x22\x66\x79\x1e\x7e\x6c\xa2\x8a\xbb\x7a\xfe\xbc\x62\x23\x09\xb1\xc7\xa8\x05\x61\x25\xed\x8c\x70\xdc\x19\x85\x55\x56\x6e\x5c\xd2\x2a\x34\x28\x49\x75\x48\x03\x62\x67\x3a\x2a\x63\xa6\x80\x58\xd6\x5e\xc6\x4a\x86\x7d\xf6\x0d\x78\x4d\xbb\x3d\x93\xc1\x4d\xbf\xff\xd5\xc3\x2d\xf3\x0d\x78\xf3\x06\xfe\xa2\xa5\x2a\xbf\xa4\x04\x00\xe7\xc2\x13\x2a\x8e\x9b\x5d\x7e\x7f\x2b\x4e\x33\xab\xfa\x69\x7f\x5f\xd2\x4f\x00\x00\x00\xff\xff\x73\xcb\xc8\x20\x58\x01\x00\x00")

func promiseMdBytes() ([]byte, error) {
	return bindataRead(
		_promiseMd,
		"promise.md",
	)
}

func promiseMd() (*asset, error) {
	bytes, err := promiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "promise.md", size: 344, mode: os.FileMode(420), modTime: time.Unix(1491287285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"async.md": asyncMd,
	"future.md": futureMd,
	"promise.md": promiseMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"async.md": &bintree{asyncMd, map[string]*bintree{}},
	"future.md": &bintree{futureMd, map[string]*bintree{}},
	"promise.md": &bintree{promiseMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

