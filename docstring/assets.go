// Code generated by go-bindata.
// sources:
// docstring/async.md
// docstring/channel.md
// docstring/concat.md
// docstring/filter.md
// docstring/future.md
// docstring/if.md
// docstring/map.md
// docstring/promise.md
// docstring/repl-cls.md
// docstring/repl-doc.md
// docstring/repl-help.md
// docstring/repl-quit.md
// docstring/repl-use.md
// DO NOT EDIT!

package docstring

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _asyncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6e\x2b\x21\x10\x44\xf7\x9c\xa2\x64\x6f\x3c\xfa\xfa\xbe\x43\x16\xbe\x40\x4e\xe0\x16\x53\xe3\x41\xc2\xdd\x63\x68\x6c\xcf\xed\x23\x48\x16\xc9\xb6\x78\xbc\x87\x38\xe2\x24\x75\xd7\x88\xc5\xca\xfd\xdf\x84\x1b\x95\x45\x9c\x15\xa2\x18\x27\x6b\x31\xb5\x56\x51\xf9\x68\xd4\xc8\x70\x79\x4a\x6e\x03\xf1\x95\xa8\x1b\x63\x5a\x12\xe7\x61\xa8\x48\x0a\x41\xe5\x26\xdd\x02\x5f\x0b\x65\x86\x2d\xe0\x9b\xb1\x79\x32\x3d\x87\x4f\x7a\x2b\x5a\x07\xf7\xed\x84\xaf\xe2\x78\xa5\x9c\x91\x7c\xf4\x61\x4f\x16\x88\xee\xfd\x6e\xef\xf4\xe8\x48\x8a\x43\x0a\x03\xef\xc9\x9d\x33\x5a\x4d\x7a\x83\x20\x5b\x94\x9c\x77\xd4\x68\x5b\x7f\x4c\xd3\xd8\x6b\xe8\x2b\x67\x5c\x3b\x7f\x3d\x87\x70\x3c\xe2\x43\x71\x79\xcb\x7d\xcb\x0c\x01\x38\xcd\x5c\x20\x95\x8f\x9f\x9f\x08\x00\x70\xea\x38\x0e\x85\xf3\x61\xfa\x3d\x58\x11\xbd\xf1\xef\xb6\x33\x67\x7b\x1d\xa6\x69\x1a\x3a\xb7\xff\x4f\x46\xb7\x32\xa4\x53\xf8\x0a\x00\x00\xff\xff\x25\x73\x46\x04\x62\x01\x00\x00")

func asyncMdBytes() ([]byte, error) {
	return bindataRead(
		_asyncMd,
		"async.md",
	)
}

func asyncMd() (*asset, error) {
	bytes, err := asyncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "async.md", size: 354, mode: os.FileMode(420), modTime: time.Unix(1491315603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _channelMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\xcd\x6e\xdb\x30\x10\x84\xef\x7c\x8a\x41\x7c\xa8\x14\x38\x3e\xf4\x58\x14\x2d\x82\x22\x87\xa2\xb7\xa2\xb7\xa2\x80\x56\xd4\x32\x22\x4a\x91\x0e\xb9\x74\x7e\x9e\x3e\x20\x29\xc5\xf6\x4d\x5e\xce\x72\xbe\x19\x7a\x87\x4e\xcf\xe4\x3d\x3b\x24\xfb\xc6\xdf\x7b\xe8\xc8\x24\x9c\x40\xc8\xde\x4e\x36\xb2\x16\x1b\x3c\x39\xac\x3a\x75\xbf\x7d\xc1\x16\xd5\x44\x42\x48\x12\xb3\x96\x1c\x19\x32\x93\x94\x83\x9c\x78\x82\x04\x3c\xb2\xe7\x48\xc2\x20\x38\x7a\x7b\x55\x89\x9f\x32\x7b\xcd\x08\x06\x27\x72\x99\xd3\x01\x3f\x0d\xa8\xda\x97\xc5\x74\x64\x6d\x8d\xe5\x69\x0f\x99\xf9\xc3\xeb\xd9\x3a\x87\x91\xd5\x98\x8d\xe1\xc8\xd3\x01\x7f\x66\x46\xe4\x94\x9d\x34\x90\x99\xd2\x7c\xb7\xd0\x11\x3a\xf8\x64\x93\x58\xff\x58\x4c\xc8\x63\xe0\xc5\xca\x00\x93\x7d\xcd\xb2\x57\x84\x41\xbb\x90\xf8\x62\x06\xf2\x53\xa1\x58\xf1\x0e\xf8\xcd\x12\x2d\x9f\xca\x2d\xe4\xc1\x8e\x17\xf6\x02\x13\xc3\x52\xb8\xce\x39\x2a\xd8\xed\xe8\x82\xfe\x7f\xbb\xc7\x33\xd9\x6a\x6c\x42\xac\xf8\x9e\x5f\xa4\xe5\x2c\x65\x8c\x8c\x82\x22\x3c\x21\x44\xb5\x69\xb6\x88\x4d\x50\xc1\xa6\x03\x1e\x8a\xb0\xba\x9f\xf7\xe9\xaa\x0e\x45\x2e\x05\x54\x67\x58\x53\xaf\x6a\xed\x94\x2a\xfc\x27\xc1\xc8\xec\x61\x5c\x4e\x33\x4f\xa0\xd2\xd1\xda\x57\x30\xca\x4a\x79\x96\xda\xd1\x89\x1b\xc7\x47\x76\xa5\x76\x3b\xfc\x58\x9d\x7e\xf1\x6b\x52\x0a\xf8\x92\xf8\x09\xc0\xd7\x4b\xe5\x8a\xbc\xbd\xf1\xf4\xad\xe8\x4a\x42\xd4\xce\xca\xc7\x56\x70\x79\x8a\xb2\x6a\x42\x5c\x30\x74\xf5\xac\xe6\xea\x87\xb2\x54\x53\x83\xce\x72\x09\xad\x89\xab\x86\x86\xae\xce\xfa\xa1\x12\xde\x7b\x3c\xbc\xd0\x72\x74\x5c\xf8\x3a\xc7\x82\xbf\xfa\xfc\x7f\xfe\xdc\x37\x82\xae\x11\xe9\x7e\xbd\xb0\x5b\xcd\x74\xff\x4f\x01\x40\x63\xb9\x31\x21\xdc\xf4\x97\x83\x91\xe2\x36\x68\xae\xaa\xfd\x90\x70\x77\x62\x2d\x21\xa2\xab\x9d\xe8\xbe\xef\xd5\x7b\x00\x00\x00\xff\xff\xbc\x92\x38\xaf\x48\x03\x00\x00")

func channelMdBytes() ([]byte, error) {
	return bindataRead(
		_channelMd,
		"channel.md",
	)
}

func channelMd() (*asset, error) {
	bytes, err := channelMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "channel.md", size: 840, mode: os.FileMode(420), modTime: time.Unix(1491314517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _concatMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcd\x8a\xc2\x30\x14\x85\xf7\xf7\x29\x0e\x74\x31\x2d\x03\x03\xf3\xbb\x1f\xc4\x37\x70\x27\x42\x43\x7a\x35\x81\x98\xd4\xdc\xa4\xb5\x3e\xbd\xa4\x85\xe0\xf6\x7c\xe7\xaf\x41\xab\x83\xd7\x2a\x41\xf8\xf6\xde\xc1\xa9\x87\x75\x0b\x36\x8d\xbd\x4a\x2c\x85\x64\xf6\x9a\x85\x76\x91\x57\x45\x15\xdf\x52\x01\x66\x13\x84\x4b\x28\xb1\x4f\xb0\x82\x64\x18\x91\x25\xbb\x84\x70\x7e\x69\xb3\xfe\x42\x85\x4d\xca\x65\x96\xc2\x58\x69\x83\x31\x86\xc9\x0e\x3c\xd4\xc6\x0f\xa2\xa6\xc1\xbf\xc7\xfe\xae\xae\xa3\x63\x22\xd4\xa3\xc7\x4f\x7c\xe1\xfb\x84\xb7\xf6\x07\xbf\xf8\xeb\x3a\xa2\x83\xb1\x82\xd9\x3a\x87\xc8\x29\x47\xbf\xee\xd7\x77\x7d\xbb\x26\xb0\xd9\x7b\x7a\x06\x00\x00\xff\xff\x46\xfc\xda\xac\xf4\x00\x00\x00")

func concatMdBytes() ([]byte, error) {
	return bindataRead(
		_concatMd,
		"concat.md",
	)
}

func concatMd() (*asset, error) {
	bytes, err := concatMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "concat.md", size: 244, mode: os.FileMode(420), modTime: time.Unix(1491317536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x3f\x4b\x03\x41\x10\xc5\xfb\xfd\x14\x0f\xd2\xdc\xa2\x04\x92\x58\xda\x88\x58\xd8\xdb\x85\x40\xd6\xcb\x9c\x37\x30\xce\x9e\xfb\x27\xc9\xf9\xe9\x65\x36\x78\xda\xed\xce\xfb\xf1\x7e\xc3\xac\xd0\x0d\x2c\x85\x12\x86\xaa\x3d\x32\x7d\xdd\x79\x48\xf8\x66\x99\x71\x0b\xb2\x0d\x2b\x69\x4f\xd9\x3d\x27\x0a\x85\x32\x82\x21\xf3\x12\xe0\x32\xc6\x4c\xe8\xa3\x16\xd2\x02\xce\x28\x23\x21\x51\xae\x52\x10\x07\x84\x69\x92\x99\xf5\xc3\xc6\x6e\x4a\xf1\xcc\x27\x3a\x35\x61\xe1\xa8\x28\xb1\xf1\xe7\x20\x95\xb2\xf1\xf6\x5b\xb0\xc5\xbe\xc6\x6b\x8b\xdc\x5f\xb1\x81\x56\xce\x7d\x68\x4d\x66\x4e\xb5\x8c\x33\x3a\x8d\x05\x43\x90\x4c\xf7\xb0\xa7\xb2\x78\xc3\xb5\x35\x34\x15\x2e\x2c\x82\x77\x02\x6b\x2f\xd5\x54\xac\xff\x16\xb7\x7d\x7f\xdd\x6b\xe7\x56\x2b\x3c\x29\x5e\xae\xe1\x73\x12\x72\x0e\xcb\xdd\xba\x41\xb1\xbf\x1e\xd0\x3d\xe2\x8a\x9d\xf7\xd8\x6f\xb0\xc5\x0e\x0f\x07\xef\xdc\xdb\xc8\xf9\xe6\x49\x54\x6a\xba\xf5\x2f\x67\x3b\x76\x1b\x6c\xfd\xd1\xfd\x04\x00\x00\xff\xff\x53\x33\x77\xb0\x85\x01\x00\x00")

func filterMdBytes() ([]byte, error) {
	return bindataRead(
		_filterMd,
		"filter.md",
	)
}

func filterMd() (*asset, error) {
	bytes, err := filterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filter.md", size: 389, mode: os.FileMode(420), modTime: time.Unix(1491317365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _futureMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4e\x03\x31\x0c\x45\xf7\x39\xc5\x57\xbb\x99\xa9\xa0\x77\x60\xc1\x05\x10\x17\x70\x13\x0f\x33\xc2\xb5\xab\xc4\x69\x3b\xb7\x47\xc9\x88\x56\x90\xe5\x73\xfe\x7f\x89\xf7\x18\xa6\xea\x35\x33\x26\xcb\xe7\x11\x7c\x25\xa9\xe4\x5c\x40\x9d\x80\xca\xaa\x71\xce\xa6\x56\x8b\xac\xe1\x83\xbd\x66\xed\xd3\x2d\xb6\x28\x7c\xde\xd2\xb0\xa9\x73\x8d\xbe\x98\x1e\xf1\x39\x33\x2e\xd9\xae\x4b\xe2\xb4\x5d\xb8\x2d\x22\xe1\xc4\x0f\x4b\x6a\x71\x42\xe1\x0b\x65\x72\x86\xcf\x99\x29\xb5\x1e\xbe\x73\xac\xad\xe6\x05\xa4\x09\xa4\x2b\x22\x89\x14\xb8\x35\x5f\xf8\xb5\xf4\x4a\x1c\x4e\x62\xf1\xfb\x80\xaa\xbe\xc8\xf3\x3d\x33\x15\x9c\x98\x15\xd1\xce\x17\x61\x67\x59\x9f\xea\x63\x08\xfb\x3d\xde\x14\xef\x77\x6a\xd3\x10\x80\x21\xf1\xd4\x3e\xf6\x58\xca\x90\x2c\x00\xc0\xe0\xf6\x7a\xe5\xe8\x96\x31\xf4\x8d\x74\x0a\x0c\x7c\x5e\x1c\xbb\xcc\x69\x37\xfe\x45\x96\x49\xbf\xf8\x3f\x5d\x59\xc4\x6e\xbb\xb1\x9f\x6e\x9c\xaa\x8f\xe1\x27\x00\x00\xff\xff\xaf\x26\x1c\xe1\x86\x01\x00\x00")

func futureMdBytes() ([]byte, error) {
	return bindataRead(
		_futureMd,
		"future.md",
	)
}

func futureMd() (*asset, error) {
	bytes, err := futureMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "future.md", size: 390, mode: os.FileMode(420), modTime: time.Unix(1491314517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ifMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xbd\x6e\xc3\x30\x0c\x84\x77\x3d\xc5\xc1\x1e\x2c\x01\x46\x81\x36\xfd\x9b\x5a\x74\xe8\xd0\xc7\x90\x63\x2a\x26\x40\xd3\x81\x44\x37\xce\xdb\x17\x72\x86\x76\xe9\x76\x12\xf9\xdd\x1d\x5b\x78\x4e\x38\x67\x1a\x61\x13\x29\x48\x0a\xbd\x07\xf0\x7c\x16\x9a\x49\xad\xa0\xec\x1a\x43\x8e\x7a\x9c\x58\x4f\xee\x2b\xd5\x55\xd0\x77\x94\x35\x1a\x8d\x3b\xcd\xc7\x68\x04\x2e\xb0\xbc\xda\x74\x85\xd7\xc5\x90\xa2\x14\xea\x51\xa5\xb2\x84\x5b\x82\x4d\xe4\xba\xaa\x3a\xa4\x25\xcf\x95\xf9\xb5\x8a\x3a\x22\x93\xad\x59\x69\xec\xb1\xd8\x44\xf9\xc2\x85\xf6\xc0\xae\x76\xbb\x41\x3d\x1c\x27\x44\xbd\xf6\xb8\xb0\x08\x06\xfa\xc7\xe3\xce\xb9\xb6\xc5\x87\xe2\x73\x8b\xf5\x0c\xe7\x00\x3f\x52\xc2\x86\xce\xdf\xe3\x01\x07\x3c\xe2\x09\xcf\x78\xc1\x6b\x08\x0e\xa8\x73\x4e\xf0\x6f\xf0\x42\x8a\x2d\xe0\x50\xbf\x81\x66\xab\x4d\x07\x3e\x35\x7f\x9e\x65\x8e\x22\x4d\x70\x3f\x01\x00\x00\xff\xff\xff\xb7\x71\x4b\x46\x01\x00\x00")

func ifMdBytes() ([]byte, error) {
	return bindataRead(
		_ifMd,
		"if.md",
	)
}

func ifMd() (*asset, error) {
	bytes, err := ifMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "if.md", size: 326, mode: os.FileMode(420), modTime: time.Unix(1491323432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xcd\x4a\xc4\x40\x10\x84\xef\xfd\x14\x05\xb9\x64\x14\x04\xe3\x22\x5e\x45\x7c\x03\x6f\xcb\xc2\x36\xbb\x1d\x33\xd0\x99\x19\xe7\x67\x93\xf8\xf4\x92\x71\x99\x63\xd7\x57\x5d\x55\x1d\xfa\x99\x03\xc6\xe2\x2e\x48\xf2\xf3\x68\xa0\xfc\x6b\x75\xc3\xcc\x21\xed\x4a\x11\x77\x91\x44\x1f\x51\x38\x4b\x02\xef\x7c\x6b\x00\xcb\xe4\x93\xe0\xc6\x5a\x76\x18\x05\x79\x12\x44\x49\x45\x33\xfc\x08\x0e\x41\x37\xeb\xbe\x77\x99\x42\xf4\x37\x7b\x95\x6b\x6d\xcb\xd6\x3b\x64\x5f\xfd\xf7\x77\x3f\xd6\xab\xd9\x5a\xfb\x13\x51\xd7\xe1\xdd\xe1\x73\xe5\x39\xa8\x10\xe1\x7f\x76\x3f\x3a\x1c\xd7\x13\xfa\x07\xac\x18\x8c\xc1\xf1\x19\x03\x5e\x70\x38\x19\xa2\xaf\xc9\x26\x2c\x56\x15\x51\x72\x89\xae\x86\xb7\xe1\xe7\x7e\xc0\x01\xaf\x78\x33\x67\xfa\x0b\x00\x00\xff\xff\xc4\x56\x60\xdc\x05\x01\x00\x00")

func mapMdBytes() ([]byte, error) {
	return bindataRead(
		_mapMd,
		"map.md",
	)
}

func mapMd() (*asset, error) {
	bytes, err := mapMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.md", size: 261, mode: os.FileMode(420), modTime: time.Unix(1491317322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x90\x4d\x6e\x02\x31\x0c\x85\xf7\x39\xc5\x13\x6c\x00\x21\xee\xc0\xa2\x8b\x6e\x7b\x03\x93\x78\x18\xab\x1e\x3b\x0a\x0e\xb4\xb7\xaf\xa2\xb6\x33\xcb\xe4\xfd\xf8\xb3\xf7\x38\xd4\xe6\x8b\x3c\xf8\x88\xda\xbc\xf4\xcc\x0f\x10\xb2\x5b\x88\x75\x0a\x71\xc3\xe2\x46\x25\x7d\x70\xf4\x66\x43\xfc\x0b\x40\x0c\x31\x33\x26\x6f\x0b\x7c\x02\x61\xea\x96\x47\xe2\x82\xf7\x09\x54\xab\x0a\x17\xbc\x24\x66\xef\x01\xb2\x44\xed\xde\x17\xb6\x38\x23\x66\x79\xac\x76\xbc\x44\x15\xa7\x9b\x7a\xfe\x3c\x9d\xf1\x22\x09\xb1\xfb\xe8\x05\xe1\x49\xda\x19\xe1\xb8\x71\x2a\xac\xf2\xe4\xc6\x05\x4f\xa1\x41\x49\xaa\x43\x1a\x14\xff\x50\x6b\x69\xcc\x14\x10\xcb\xda\xcb\x58\x69\x9b\x7e\xc1\x75\x75\x67\x32\xb8\xe9\x37\x6e\x8c\xad\xdd\x2d\xf3\x25\xa5\xfd\x1e\x57\xc3\xdb\x17\x2d\x55\x39\x25\xe0\x50\x78\x42\xdd\x2e\x76\x1c\x7f\x15\xbb\x99\x55\x7d\xf7\xfb\x3a\xa6\x9f\x00\x00\x00\xff\xff\x4a\x9a\x4a\x03\x53\x01\x00\x00")

func promiseMdBytes() ([]byte, error) {
	return bindataRead(
		_promiseMd,
		"promise.md",
	)
}

func promiseMd() (*asset, error) {
	bytes, err := promiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "promise.md", size: 339, mode: os.FileMode(420), modTime: time.Unix(1491314517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replClsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd0\x48\xce\x29\xd6\x54\x48\xce\x49\x4d\x2c\x2a\x56\x28\xc9\x48\x55\x28\x4e\x2e\x4a\x4d\xcd\xe3\x72\x06\x89\x80\x05\x92\x4b\x8b\x8a\x52\xf3\x4a\x14\x92\xf3\xf3\x4a\x40\x74\x7e\x1a\x92\x3a\x3d\x85\x90\x8c\xcc\x62\x85\xcc\x62\x85\x44\x85\x20\xd7\x00\x1f\xdd\xfc\xbc\x9c\x4a\xae\xb4\xd2\xbc\xe4\x92\xcc\xfc\x3c\x3d\x2e\x40\x00\x00\x00\xff\xff\x76\xbf\x31\x66\x61\x00\x00\x00")

func replClsMdBytes() ([]byte, error) {
	return bindataRead(
		_replClsMd,
		"repl-cls.md",
	)
}

func replClsMd() (*asset, error) {
	bytes, err := replClsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-cls.md", size: 97, mode: os.FileMode(420), modTime: time.Unix(1491314517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replDocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x0f\xdd\x58\xd0\xde\x41\xb0\x3b\x17\x22\x5e\x60\x48\x26\x74\xa0\x9d\x04\x27\x85\xe6\xf6\xd2\x8a\x0b\xb7\xef\xf3\x1f\xaf\xc3\x29\xe6\x80\x94\xdf\x4b\x8f\xa8\x5e\x66\x6e\x8e\x98\xc3\xba\x88\x55\xae\x9a\x8d\x6e\x3f\x5c\x27\xf9\x9f\xf6\xdf\x41\xbd\x48\xd0\xa4\x12\x0f\xd3\x19\x9a\xc0\xd6\x20\x9b\x7a\xf5\x81\x5e\x93\x3a\xd4\xc1\x78\x8e\x8f\xfb\x25\xdb\xdc\x90\x56\x0b\xbb\x63\x20\xea\x3a\x5c\x0d\xe3\xc6\x4b\x99\x85\x08\xdf\x26\xf6\x66\xa1\xa7\x4f\x00\x00\x00\xff\xff\xb9\x67\x3b\x36\xa2\x00\x00\x00")

func replDocMdBytes() ([]byte, error) {
	return bindataRead(
		_replDocMd,
		"repl-doc.md",
	)
}

func replDocMd() (*asset, error) {
	bytes, err := replDocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-doc.md", size: 162, mode: os.FileMode(420), modTime: time.Unix(1491315628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replHelpMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x3d\x6e\xeb\x30\x10\x84\x7b\x9e\x62\x4a\x59\x78\xf0\x01\x5e\x17\x38\xee\x52\x24\x41\x0e\x60\x8a\x1a\x59\x04\xc8\x25\xc3\x25\xfd\x73\xfb\x40\x72\x62\x38\xc8\xb6\xf3\x7d\xb3\xd3\x77\x33\x43\xde\xf4\xb8\xdd\xb3\xd7\x1c\xec\x15\x75\xf6\x8a\x25\x41\xa4\xaa\x3d\xd2\xf4\xdd\x98\x1c\xa6\x54\xe2\x0a\xff\x80\x63\x72\x2d\x52\xaa\xad\x3e\xc9\x16\xfb\x8b\x8d\x39\xf0\x3f\x0e\x2b\x6e\xf5\x2a\x6e\x73\x30\x7d\xd7\x94\x10\xfd\xfe\xb3\x9b\xad\x1c\x09\xd7\x4a\xa1\x54\x88\x8d\xd4\x6c\x1d\x7f\xf9\x8b\x31\xa5\xb4\xda\x2e\xe8\x7d\x22\x76\x81\xb6\xa0\xce\x84\xba\x42\x8a\xe9\xbb\xcf\xe6\xeb\x1d\x78\x6b\xbe\xae\xf1\xfb\xfe\xf5\xc5\x98\x8f\x99\xc8\x25\xc5\x5c\x31\x30\xa4\x33\xfc\x48\xa9\x7e\xf2\xd4\x95\xfa\xb3\xe2\x1f\xa6\x14\x42\x3a\x73\xc4\x70\x5d\x11\x23\x2d\x0e\x2c\x48\x13\x78\xc9\x85\xaa\x3e\xc9\x62\xdb\x8a\xb3\x0f\x01\xb3\x3d\x11\x03\x29\xe0\xc9\x86\x66\x2b\x47\x78\x79\xac\x37\xcb\x18\xe8\x4d\xdd\x02\x4f\x50\x2f\xc7\xc0\x87\x42\x38\x2b\xd0\x6c\x05\xb1\x85\xea\x73\x20\x82\x17\xea\xd6\x7c\x05\x00\x00\xff\xff\x5f\x88\xff\xca\xa5\x01\x00\x00")

func replHelpMdBytes() ([]byte, error) {
	return bindataRead(
		_replHelpMd,
		"repl-help.md",
	)
}

func replHelpMd() (*asset, error) {
	bytes, err := replHelpMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-help.md", size: 421, mode: os.FileMode(420), modTime: time.Unix(1491326087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replQuitMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd0\x28\x2c\xcd\x2c\xd1\x54\x00\x91\xc5\x0a\x25\x19\xa9\x0a\x41\xae\x01\x3e\x5c\x9e\xb9\xb9\xa9\x29\x99\x89\x25\xa9\x39\x95\x0a\xa9\x15\x30\xa9\xe0\x82\xd2\x92\x92\xd4\x22\xb0\x12\x3d\x85\x90\x8c\xcc\x62\x85\xcc\x62\x85\x44\x30\x5f\x37\x3f\x2f\xa7\x52\x21\xad\x34\x2f\xb9\x24\x33\x3f\x4f\x8f\x0b\x10\x00\x00\xff\xff\xe9\x14\xcc\xb5\x5a\x00\x00\x00")

func replQuitMdBytes() ([]byte, error) {
	return bindataRead(
		_replQuitMd,
		"repl-quit.md",
	)
}

func replQuitMd() (*asset, error) {
	bytes, err := replQuitMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-quit.md", size: 90, mode: os.FileMode(420), modTime: time.Unix(1491314517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replUseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\x41\x0a\xc2\x40\x0c\x46\xe1\x7d\x4e\xf1\xc3\x6c\xec\xc2\xde\x41\xa4\x3b\x17\x22\x5e\x20\x84\xd4\x19\x68\x93\xd2\x64\xa0\xde\xde\x85\x82\xdb\xc7\x83\xaf\xe0\xd4\x43\x61\x31\x40\x2a\xdb\x4b\x03\xc6\xab\xc6\xc6\xa2\x74\xfd\x95\xac\x0a\xe9\xfb\xae\x96\x10\xb7\xd4\x23\xff\xd7\x88\x67\x6d\x81\x16\x60\x3c\xa6\xfb\xed\xec\xb6\xbc\x31\x77\x93\x6c\x6e\x23\x51\x29\xb8\x18\xa6\x83\xd7\x6d\x51\x22\x7c\xc5\xd9\x7d\xa0\x4f\x00\x00\x00\xff\xff\xc5\x9a\xf9\x8e\x7e\x00\x00\x00")

func replUseMdBytes() ([]byte, error) {
	return bindataRead(
		_replUseMd,
		"repl-use.md",
	)
}

func replUseMd() (*asset, error) {
	bytes, err := replUseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-use.md", size: 126, mode: os.FileMode(420), modTime: time.Unix(1491315641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"async.md": asyncMd,
	"channel.md": channelMd,
	"concat.md": concatMd,
	"filter.md": filterMd,
	"future.md": futureMd,
	"if.md": ifMd,
	"map.md": mapMd,
	"promise.md": promiseMd,
	"repl-cls.md": replClsMd,
	"repl-doc.md": replDocMd,
	"repl-help.md": replHelpMd,
	"repl-quit.md": replQuitMd,
	"repl-use.md": replUseMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"async.md": &bintree{asyncMd, map[string]*bintree{}},
	"channel.md": &bintree{channelMd, map[string]*bintree{}},
	"concat.md": &bintree{concatMd, map[string]*bintree{}},
	"filter.md": &bintree{filterMd, map[string]*bintree{}},
	"future.md": &bintree{futureMd, map[string]*bintree{}},
	"if.md": &bintree{ifMd, map[string]*bintree{}},
	"map.md": &bintree{mapMd, map[string]*bintree{}},
	"promise.md": &bintree{promiseMd, map[string]*bintree{}},
	"repl-cls.md": &bintree{replClsMd, map[string]*bintree{}},
	"repl-doc.md": &bintree{replDocMd, map[string]*bintree{}},
	"repl-help.md": &bintree{replHelpMd, map[string]*bintree{}},
	"repl-quit.md": &bintree{replQuitMd, map[string]*bintree{}},
	"repl-use.md": &bintree{replUseMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

