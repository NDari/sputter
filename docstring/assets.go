// Code generated by go-bindata.
// sources:
// docstring/apply.md
// docstring/assoc.md
// docstring/async.md
// docstring/channel.md
// docstring/concat.md
// docstring/cond.md
// docstring/conj.md
// docstring/cons.md
// docstring/def.md
// docstring/defn.md
// docstring/do.md
// docstring/eq.md
// docstring/filter.md
// docstring/first.md
// docstring/fn.md
// docstring/future.md
// docstring/has-meta.md
// docstring/if.md
// docstring/is-assoc.md
// docstring/is-list.md
// docstring/is-mapped.md
// docstring/is-nil.md
// docstring/is-seq.md
// docstring/is-vector.md
// docstring/len.md
// docstring/let.md
// docstring/list.md
// docstring/map.md
// docstring/meta.md
// docstring/ns.md
// docstring/nth.md
// docstring/promise.md
// docstring/quote.md
// docstring/repl-cls.md
// docstring/repl-doc.md
// docstring/repl-help.md
// docstring/repl-quit.md
// docstring/repl-use.md
// docstring/rest.md
// docstring/to-assoc.md
// docstring/to-list.md
// docstring/to-vector.md
// docstring/vector.md
// docstring/with-meta.md
// docstring/with-ns.md
// DO NOT EDIT!

package docstring

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _applyMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\x4d\x4a\xc0\x30\x10\x05\xe0\xfd\x9c\xe2\x41\x17\x26\x08\x05\x15\xdc\xbb\xe8\x0d\xdc\x97\xb1\x99\xda\x40\x9a\xc4\xfc\xd4\x7a\x7b\x49\x83\x05\x97\x33\x7c\xef\x0d\x33\x40\x71\x8c\xee\x07\x6b\xf5\x0b\xb2\x7c\x69\xb4\xd9\x4a\x06\xa7\xcf\xba\x8b\x2f\x19\x25\x80\x2f\x50\x6c\xf0\x34\x1d\xec\x2a\x17\xc9\x28\x9b\x20\xa6\x70\x58\x23\xa6\x65\xab\xf8\x45\xc0\xde\xdc\x1d\xb6\x64\x34\x2e\x57\xc9\x3f\xff\xd7\x07\x15\x52\xf7\x0b\x7f\x38\xd1\xe0\x1e\xbb\xcf\x8f\x44\xc3\x80\x37\x8f\xe9\xe4\x3d\x3a\x21\x02\x94\x91\x15\x27\x1e\xd4\x13\x9e\xf1\xa2\x75\x5b\xf5\x3f\x1e\x71\x6a\xa2\xf7\xcd\x66\x48\xf7\xf8\xb6\xce\x21\x49\xa9\xc9\x63\x7e\x9d\x47\xfa\x0d\x00\x00\xff\xff\xc0\x83\x17\xc7\xf5\x00\x00\x00")

func applyMdBytes() ([]byte, error) {
	return bindataRead(
		_applyMd,
		"apply.md",
	)
}

func applyMd() (*asset, error) {
	bytes, err := applyMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apply.md", size: 245, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\xcf\x4a\x73\x41\x0c\x05\xf0\xfd\x3c\xc5\xe1\x76\xf3\xf5\x43\x8b\xe0\x4e\x44\x70\x21\xbe\x80\xe0\x3a\x9d\x9b\xe9\x0d\xce\xcd\x5c\x92\x4c\x6d\xdf\x5e\x6c\x8b\x7f\xc0\x65\xc2\x8f\x73\x48\x56\xf8\x47\xee\x2d\xe3\xfe\x8d\x8f\xd8\x53\xed\xfc\xf0\x7f\x8d\x6c\x4c\xc1\x0e\x82\xf2\x3b\x4e\x42\x28\x64\xcf\xf0\xb0\x9e\xa3\x1b\xa7\x57\xa9\xf5\x02\xff\x70\x5b\x72\x1e\xd1\x14\x31\x31\x16\x6b\x7b\x19\x79\xc4\x57\x09\x16\x12\xf3\x2b\x34\x83\x71\x74\x53\x90\x82\xe7\x25\x8e\xbf\x52\xa4\x40\x1b\x4a\xb3\xd9\x41\xf6\x1d\xb4\xc1\xcb\x24\x8e\xd2\x35\x87\x34\x85\xf8\xa7\x1b\xa5\x14\x36\xd6\x40\x4c\x74\x6e\xfe\x19\x56\x25\xd8\xa8\xc2\x8f\x1a\x74\x00\x1f\x32\x2f\x27\x1a\x90\x40\x26\xc5\x96\x11\xa7\x83\x46\x88\x82\x50\xc4\x3c\xae\x73\x25\x77\x14\xf2\x49\x9a\x6e\x52\x5a\xad\xf0\xa8\x78\x3a\xd0\xbc\x54\x4e\x09\x97\x17\x26\x00\xb8\x53\x9a\x19\x83\x2f\x3d\x82\x6d\x38\xef\x68\xc7\xc0\xcd\xe6\xf6\x3c\x55\xd2\x1d\x86\xe7\x36\xac\xd3\x47\x00\x00\x00\xff\xff\xcf\x89\xc6\xc9\x7e\x01\x00\x00")

func assocMdBytes() ([]byte, error) {
	return bindataRead(
		_assocMd,
		"assoc.md",
	)
}

func assocMd() (*asset, error) {
	bytes, err := assocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assoc.md", size: 382, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _asyncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x6e\xeb\x30\x0c\x05\xf7\x3a\xc5\x43\xb2\xb1\xf0\xf1\x73\x87\x2e\x72\x81\x9e\x20\x84\x4c\xdb\x02\x64\xd2\x95\x28\x27\xbe\x7d\x21\x39\x05\xda\x2d\xc5\x99\x21\x74\xc5\x40\xe5\x90\x80\x49\xf3\xfa\xcf\x63\x66\xe1\x4c\xc6\x05\x24\xe8\x2f\x4b\x56\xd1\x5a\x50\xf8\xab\xb2\x04\x76\xf7\x9d\x52\xed\x2b\xb6\x30\xca\xc6\x21\x4e\x91\xc7\x6e\x28\x88\x02\x42\xe1\x8d\x9a\x05\xb6\x64\xa6\x11\x3a\x81\x5f\x1c\xaa\x45\x95\x1b\x3e\xd9\x6a\x96\xd2\xf7\x4e\x27\x6c\x21\xc3\x33\xa6\x84\x68\xbd\x0f\xdd\x39\x83\xe4\x68\x6c\xeb\xb4\x68\x4f\x92\x81\x32\x83\xd7\x68\xc6\x23\x6a\x89\x32\x83\x90\x34\x50\x4a\x07\x4a\xd0\xad\x1d\x53\x25\xb4\xda\x0f\xde\x8e\xc3\x63\x68\xd4\xa9\xf2\x8f\x9b\x73\xd7\x2b\x3e\x04\xf7\x17\xad\x5b\x62\xe7\x80\x61\xe4\x09\x41\x93\xe6\xf2\xfe\x18\x07\x00\x27\x77\xc9\x3c\x5e\xfc\xef\x81\x66\x92\x99\xff\xce\x0e\x4e\x49\x9f\x17\xef\x7d\x17\x9a\xfe\xdf\x39\x98\xe6\xb7\xd6\xbb\xef\x00\x00\x00\xff\xff\xe7\xeb\x62\x0e\x73\x01\x00\x00")

func asyncMdBytes() ([]byte, error) {
	return bindataRead(
		_asyncMd,
		"async.md",
	)
}

func asyncMd() (*asset, error) {
	bytes, err := asyncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "async.md", size: 371, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _channelMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\x3d\x6f\x1b\x3d\x10\x84\x7b\xfe\x8a\x81\x5d\xbc\x77\x07\x5b\xc5\x5b\xaa\x09\x8c\xc0\x45\x90\x2e\x48\x17\x04\xb8\x3d\xde\xd2\x47\x84\x47\xca\xe4\x9e\xfc\xf1\xeb\x83\x25\xf5\x11\xa9\x92\x96\xb3\x9c\x67\x86\xba\x47\x67\x17\x8a\x91\x03\x8a\xff\xe4\x2f\x3d\x6c\x66\x12\x2e\x20\x6c\xd1\xcf\x3e\xb3\x15\x9f\x22\x05\x9c\x74\xe6\xe9\xfc\x0d\x5e\x55\x33\x09\xa1\x48\xde\xac\x6c\x99\x21\x0b\x89\x1e\x6c\x85\x67\x48\xc2\x0b\x47\xce\x24\x0c\x42\xa0\xcf\x0f\x14\x7e\xdd\x38\x5a\x46\x72\x38\x52\xd8\xb8\xec\xf0\xcd\x81\xaa\xbd\x2e\x96\x03\x5b\xef\x3c\xcf\x0f\x90\x85\x2f\x5e\x6f\x3e\x04\x4c\x8c\x69\x73\x8e\x33\xcf\x3b\xfc\x5c\x18\x99\xcb\x16\xa4\x81\x2c\x54\x96\xc7\x95\x0e\xb0\x29\x16\x5f\xc4\xc7\x17\x35\xa1\x88\x91\x57\x2f\x23\xdc\x16\x6b\x96\x07\x10\x46\x1b\x52\xe1\x9b\x59\x9c\x95\xe2\x84\xb7\xc3\x0f\x96\xec\xf9\xa8\xb7\x50\x04\x07\x5e\x39\x0a\x5c\x4e\x6b\xe5\xba\xe4\xa8\x60\xc3\x14\x92\xfd\x33\x3c\xe0\x8d\x7c\x35\x76\x29\x57\x59\xe4\x77\x69\x39\xb5\x8c\x89\xa1\x28\xc2\x33\x52\xbe\x68\xce\x11\x9b\xa0\x82\xcd\x3b\x3c\xab\xb0\xba\x5f\xf7\xe9\xb6\x0e\x0a\x25\xa1\x3a\xc3\xbb\x7a\x55\x6b\x47\xab\x88\xff\x09\x26\xe6\x08\x17\xb6\xb2\xf0\x0c\xd2\x8e\x4e\x7d\x25\x07\x2f\xfa\x2c\xb5\xa3\x23\xe7\x9b\x48\x3b\x63\xee\xef\xf1\xf5\xe4\xf4\x9d\x3f\x8a\x31\xc3\xbe\xf0\xeb\x00\xfd\xdc\xa4\x6f\xcc\xe7\x47\x9e\xcd\xb0\xd7\x80\x55\xa8\xad\xd5\xb0\xf9\xd2\xb2\x1a\xeb\xba\x4b\x79\xc5\xd8\xe9\x71\x0b\xd7\x8f\x66\xd8\xd7\xe4\xba\x4a\xd7\x05\x49\xad\x90\x9b\xa2\xc6\xae\xce\xfa\xb1\x82\x3e\x45\x3c\xbf\xd3\x7a\x08\x6c\x0c\xd0\x05\x16\xfc\xb2\xd7\xbf\xf5\xff\x7d\xc5\x40\x57\xc9\x60\xfb\xd3\x85\x5d\xf3\x83\xed\x7f\x1b\xc5\x6d\x34\x77\x2e\xa5\xbb\xfe\xdf\xc1\x44\xf9\x3c\x68\xae\xa6\xfd\x90\xf4\x78\x64\x2b\x29\xa3\xd3\x6e\x60\xfb\xbe\x37\x7f\x03\x00\x00\xff\xff\x5c\xd5\x61\xd6\x4f\x03\x00\x00")

func channelMdBytes() ([]byte, error) {
	return bindataRead(
		_channelMd,
		"channel.md",
	)
}

func channelMd() (*asset, error) {
	bytes, err := channelMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "channel.md", size: 847, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _concatMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x6a\xc3\x30\x10\x84\xef\xfb\x14\x03\x3e\xd4\xa6\x50\xe8\xef\xbd\x94\xbe\x41\x6e\x21\x18\x21\x6f\x22\x81\x22\x39\x5a\xc9\x8e\xf3\xf4\x41\x32\x98\xe4\x3a\xdf\x7e\xb3\xd3\xa0\xd5\xc1\x6b\x95\x20\x7c\x79\xed\xe0\xd4\xcd\xba\x05\x6b\xc6\x5e\x25\x96\x42\x32\x7b\xcd\x42\x7f\x91\x6b\xa2\xca\xdd\xb2\x01\xcc\x26\x08\x17\x29\xb1\x4f\xb0\x82\x64\x18\x91\x25\xbb\x84\x70\x7c\x68\xb3\xfe\x54\xd9\xa4\x5c\x66\x29\x8c\x95\x36\x18\x63\x98\xec\xc0\xc3\xd6\xf8\x46\xd4\x34\xf8\xf5\xf8\xbf\xaa\xf3\xe8\x98\x08\xdb\xd0\xfd\x3b\x3e\xf0\x79\xc0\x4b\xfb\x85\x6f\xfc\x74\x1d\xd1\xce\x58\xc1\x6c\x9d\x43\xe4\x94\xa3\xaf\x3f\x9e\x27\xf6\x6d\xd5\xb0\x3a\x3d\xdd\x03\x00\x00\xff\xff\xb8\x04\xbe\xd3\xf9\x00\x00\x00")

func concatMdBytes() ([]byte, error) {
	return bindataRead(
		_concatMd,
		"concat.md",
	)
}

func concatMd() (*asset, error) {
	bytes, err := concatMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "concat.md", size: 249, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _condMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdb\x30\x10\x85\x77\xfe\x8a\x07\x7b\x88\x15\x04\x86\x32\x64\x48\x10\xa4\xe8\xd0\x02\x9d\xdb\x3d\x3e\x53\x67\x93\x08\x7d\x14\xc8\x53\x25\xfd\xfb\xe2\xa4\xc4\x2d\x0a\x74\xac\x26\x51\x78\xef\xe9\xbe\x7b\xdc\x62\xe7\xb3\x74\x78\xee\x0b\x77\xd0\xc0\xf2\x72\x7b\x0b\x4e\x95\x3f\x35\xe8\xb9\x9c\x72\xb9\x54\x98\x24\x6a\xcc\x42\x09\xc7\x42\xe2\x43\x94\xb3\xfb\x9a\x0b\x98\x7c\xc0\xe1\x0f\xf7\x01\x3e\xd1\x50\xf9\xce\x8e\xb0\xef\xd1\x93\x32\xc6\x98\x12\x8e\x0c\xfe\x49\x69\x20\xe5\xee\x0e\x24\x1d\xe2\x09\x51\x11\x2b\xb4\x0c\x1a\x66\xec\x24\x2b\x4e\x94\x2c\xc0\x5e\x25\xa6\x66\x49\xba\xb1\xf4\x1b\xd8\x3c\x26\xbf\xc6\x2c\x29\x85\x75\x28\x62\x99\x59\x03\x97\x31\x56\x5e\x4c\xc2\x93\xbe\xcf\x63\xa6\xbe\x64\xcf\xb5\x72\xb7\x77\x6e\xbb\xc5\x67\xc1\x97\x89\x2e\x7d\x62\xe7\x80\x5d\xc7\x27\x4c\x78\x7c\x6c\x96\x93\x21\x3b\x00\xd8\x3d\x63\xc2\x43\xdb\x00\x9b\x91\x2a\x12\xd7\x0a\x0d\x24\x78\x68\x37\xab\xe0\x05\x13\xee\xdb\xb6\x59\x05\xe7\xc2\xa4\x5c\x56\xcd\x7d\xfb\x2e\xfa\xfd\x2c\xa2\x28\x38\xb2\x8e\xcc\xb2\x69\x9c\xfb\x26\xd0\x10\x2b\x3c\x19\xf6\xeb\xdf\x8a\xd7\xeb\xf2\x3e\x38\xf7\xf8\x9e\xe2\x39\x68\x9a\x71\xc9\x85\x41\x5c\x35\xb0\x46\x4f\x29\xcd\xe8\x13\x53\x8d\x72\xc6\x98\x87\xd4\x99\x4f\x33\x6c\x05\x24\x78\xb2\x6a\xf1\xc6\xf3\x98\x4b\xf7\xf4\x3f\x48\xd7\x3f\xfc\x83\xf4\x47\x30\x08\xaa\xd9\x88\x49\x57\xec\x31\x97\xb7\x6a\xfd\x1c\xd9\x2f\x55\x59\x75\x87\x25\xe7\xf0\x31\xea\xb5\xf0\x6a\x30\xeb\x65\xd9\xbb\x5f\x01\x00\x00\xff\xff\x9f\xdb\x4e\x79\xbe\x02\x00\x00")

func condMdBytes() ([]byte, error) {
	return bindataRead(
		_condMd,
		"cond.md",
	)
}

func condMd() (*asset, error) {
	bytes, err := condMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cond.md", size: 702, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _conjMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xbd\x6e\xe3\x30\x10\x84\x7b\x3e\xc5\x00\x6e\xce\xb8\x83\x80\xcb\x7f\xeb\x22\x6f\x10\x20\x45\x60\x58\x2b\x72\x65\x31\xa6\x76\x15\x72\x65\xc5\x79\xfa\x40\x91\xed\x26\x2d\xe7\x9b\xe1\xce\xac\xf0\xc7\xab\xbc\xa3\xf0\x07\x5a\xcd\xfd\xdf\x35\x28\x84\x02\x4e\xdc\xb3\x58\x81\x29\x68\x56\x47\x16\xcf\x6e\xf3\x5b\x9b\xed\x1a\x85\x9a\xc4\x57\xae\xc2\x4b\x17\x0b\x1a\xee\xe8\x18\x35\x63\x8a\x29\x21\xc4\xb6\xe5\x8c\xc0\x03\x4b\x88\xb2\x87\x0a\xac\xe3\x39\xc0\x67\x36\x86\x9d\x06\xae\xb0\x41\x8a\xc5\x16\xcb\x90\x7f\xe0\x7f\x20\x1c\xd9\xdb\x25\x89\x86\xe5\x75\xea\x62\x62\x90\x80\x4a\x51\x1f\xc9\xe2\x91\xd1\xd3\x81\x0b\x44\xb1\x1f\x29\x93\x18\x73\x01\x35\x3a\x1a\x34\x07\xce\x51\xf6\xe7\xeb\xda\x51\xbc\x45\x95\x25\x53\xd4\x30\x69\x3e\x60\x8a\xd6\x21\xd1\xd7\xe9\xda\xa6\xa0\x8c\xbe\x03\x15\xa8\x70\xc1\x90\x35\x8c\x9e\x03\x9a\x13\xea\x9e\x86\x1a\x9a\x51\xb7\x31\x19\xe7\xba\x72\x6e\xb5\xc2\x46\xf0\xfc\x49\xfd\x90\xd8\x39\x9c\x17\x7e\xfb\x8f\x1b\xdc\xe2\x6e\x8b\x7b\x3c\xe0\x11\x4f\x6b\xe7\x5e\xe7\x9f\x33\xdb\x98\x97\x29\xce\x25\x77\x17\xf6\x82\x6e\x77\x95\xfb\x0e\x00\x00\xff\xff\x43\x9d\xf6\x75\xaa\x01\x00\x00")

func conjMdBytes() ([]byte, error) {
	return bindataRead(
		_conjMd,
		"conj.md",
	)
}

func conjMd() (*asset, error) {
	bytes, err := conjMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conj.md", size: 426, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _consMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x3f\x6f\xdc\x30\x0c\xc5\x77\x7f\x8a\x07\x64\xa8\x2d\x04\x07\x24\xfd\xb3\x77\xe8\xd6\xb1\x40\xc7\x98\x91\x78\x36\x01\x1d\xe5\x92\xf2\xfd\xf9\xf6\x85\xec\x5c\x86\xa2\xed\xc8\x47\x3e\xf2\x47\x4a\x0f\xe8\x63\x51\xc7\x99\xf2\xca\x70\xfe\x35\x20\x96\xd3\xab\x28\x3b\xe8\x4d\xbd\x48\x9d\x41\x2d\xb9\xb2\x46\xee\x7e\x6e\xb1\xa2\x58\x62\xe3\xf4\x9e\x78\x84\xaf\x71\x06\x35\x67\x16\xaf\x28\x86\x33\xc7\x5a\xec\x11\x75\x66\x18\xfb\x9a\x2b\xa4\xe5\x95\x2f\x7f\xd4\xec\x63\x5a\xdd\x3e\x75\x31\x5e\x58\x13\x27\xd4\xb2\xc9\xc5\x64\x12\xa5\x7c\xc0\x1d\x60\xd5\xff\x20\x28\xc8\xbd\x44\xa1\x2a\x67\x06\x99\xd1\x6d\xc3\x30\x6e\x04\x5a\x30\xad\x64\xa4\x95\x1b\xd8\x44\x96\x44\x27\x2c\xc5\xa5\x4a\xd1\x43\xd7\xfd\x98\x19\x4a\x27\xc6\xd8\x0e\x34\xee\xd8\x67\xf6\x2a\x13\xa3\x1c\x71\x99\x59\xf1\x5d\x7c\x81\x9c\x96\xcc\x27\xd6\x4a\xcd\xea\x08\xcd\x10\xaa\xad\xb1\x72\x7a\xdf\xd4\xdb\xaa\x91\x73\x76\xbc\xde\xb0\x90\x58\x1b\x48\x18\x23\xd9\x88\x3e\xc4\x50\xb4\xb2\xb6\xba\xe3\xb6\x6f\xa0\x90\x92\xb1\x3b\x16\xb2\xda\xd4\x60\x81\x27\xf1\xca\x36\xdc\x1f\x65\x8c\xe9\x1f\xee\x14\x38\xda\x86\xf5\x37\xff\xa1\xeb\x1e\x1e\xf0\x55\xf1\xed\x4a\x0d\xbf\xeb\x80\x3e\xf1\x11\x57\x7c\xe8\x3f\xe2\x13\x3e\xe3\xcb\x30\xdc\xc5\xdb\xdb\x2f\x79\xc6\x75\x17\xb7\xe8\x09\xb7\x01\x68\x97\x12\x07\xef\x7d\x70\x91\x9c\x61\x5c\x57\x53\xbc\xf4\x4f\x78\xc6\xbd\xdb\xcb\xa1\xfb\x1d\x00\x00\xff\xff\x22\xe7\xbd\xb3\x6e\x02\x00\x00")

func consMdBytes() ([]byte, error) {
	return bindataRead(
		_consMd,
		"cons.md",
	)
}

func consMd() (*asset, error) {
	bytes, err := consMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cons.md", size: 622, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\xcd\x8a\xdb\x40\x10\x84\xef\x7a\x8a\x02\x1f\xd6\x5e\x36\x86\x6c\x9e\x60\x0f\x39\x04\x72\x0c\xe4\x10\x02\xdb\x92\x4a\x9e\x81\x99\x91\xd2\xdd\x63\x5b\x79\xfa\x30\xb2\xf1\x1e\x72\x69\x44\xff\x7c\x55\xdd\x9a\x1d\xf6\x23\x27\x14\xc9\xc4\x34\x6b\x3e\x40\xcc\xe2\xa9\x18\x64\x4b\xda\x22\x03\x71\x16\x8d\xd2\x27\x76\x3f\x63\x4a\xf7\x0e\xc8\x23\x8d\x58\xe0\x81\x18\xaa\x2a\x8b\x7f\x0c\xbe\xe0\x12\xe2\x10\x10\x0d\x4f\xd5\xa8\x4f\xe8\x57\x8c\x9c\xa4\x26\x3f\xe2\x2d\xa5\x07\xc2\x20\x4a\xc4\x9c\xab\x6f\x44\x29\x23\x94\x56\x93\x37\xb8\x14\x50\x75\x56\xf4\x8c\xe5\x04\x95\x68\x1c\x11\xa7\x56\x10\x77\xe6\xc5\x9b\x46\x96\x91\xf0\x19\xca\x4f\x77\x8f\x1e\x98\x8f\xf8\x11\xa2\xa1\x67\x90\x73\x9c\xb5\x35\x8e\x71\x9a\xb8\x59\xf5\x20\x05\x79\x36\xc7\xf7\x68\x8b\xbd\x40\xac\x0d\xad\xb8\xb4\x4d\x4f\x2c\x54\x49\x69\xc5\x24\x31\xc1\x62\x62\xf1\xb4\x36\x4b\x56\x87\x80\x41\x8c\x76\xec\xba\xdd\x0e\x6f\x05\x5f\xaf\x92\x97\xc4\xae\xc3\xed\xa8\xd7\x0e\x00\xf6\x59\x96\xed\x03\xd8\x4f\x05\xbf\xd6\xdf\x58\xf1\xfc\x8c\xd7\xc3\x3d\x6b\xfc\xf3\xb9\x85\xd7\x16\xbe\x1c\x0e\x5d\xb7\xf9\xe5\x8d\x76\x33\x32\x28\xc5\x09\x41\x92\xbf\x2b\xb2\x2c\xb8\x04\x2a\x41\x19\x02\xce\x92\x2a\x31\x4f\xdb\x3f\xf0\xa0\x24\x16\x9d\xcf\x71\xe4\xd8\x90\x95\x65\xa0\x6d\x6b\xcf\xb5\x4f\x1c\x51\x97\xb9\x40\x5b\xc5\xfc\x88\x6f\x7e\xd3\xf0\xc0\x82\xc7\xdd\xc4\x3f\xb4\x7c\xde\xd0\xff\xbf\x07\xbc\x5f\xdf\x8f\xdd\xbf\x00\x00\x00\xff\xff\xbd\x32\x5c\xd5\x44\x02\x00\x00")

func defMdBytes() ([]byte, error) {
	return bindataRead(
		_defMd,
		"def.md",
	)
}

func defMd() (*asset, error) {
	bytes, err := defMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "def.md", size: 580, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _defnMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x50\x3d\x6f\xdc\x30\x0c\xdd\xfd\x2b\x1e\x92\x21\x76\x3e\x0e\xb9\x8e\x01\x8a\x22\x43\xb7\x8e\x05\x3a\x04\x19\x68\x99\x3a\x13\x90\xe8\xab\x48\x25\x3d\x14\xfd\xef\x85\x84\x43\x72\x5e\xcc\x47\x3e\x3d\x3e\xbe\x6b\x8c\x0b\x47\x85\x52\x66\x64\x76\xfa\x86\x97\x56\xdf\xde\xbe\x22\x6e\x25\xdf\x4d\x20\x33\x39\xa8\x81\x3a\xc9\x8e\x14\x18\xb1\x6a\x70\xd9\x74\xf8\x25\x29\x9d\x19\xa0\x8f\x36\xa8\xd1\xdf\xa8\x08\xcd\x89\x21\x0a\x5f\x19\xa1\x96\xc2\xea\x9f\x32\xf7\x78\x5f\x25\xac\x10\xc3\x4d\x35\x2e\x37\x98\x4f\x58\x38\x52\x4d\xbe\xc3\x73\x4a\x1f\x12\x06\x2a\x0c\xc9\xb9\x7a\x57\x24\x5d\x50\xd8\x6a\xf2\x26\x4e\x0a\x2e\x65\x2b\x98\x59\xf4\x80\x42\x62\xbc\x40\x62\x1b\x90\x3b\xe7\xa3\xb7\x1d\x99\x16\x86\x6f\x28\xfc\x70\x76\xec\x2b\xe7\x1d\x7e\xae\x62\x98\x79\xa5\x37\xd9\x4a\x23\x2e\x12\x23\x77\xab\xbe\x92\x22\x6f\xe6\xf8\x21\x76\xb4\xfb\x76\x98\xaf\x7c\xc2\x7b\xbb\xfb\xc0\xca\x85\x52\x3a\x21\x92\x24\x98\x24\x56\x4f\xa7\x66\xc9\x6a\x58\x11\xc8\xd8\x76\xc3\x70\x7d\x8d\x67\xc5\xf7\x3f\x94\x8f\x89\x87\x01\xe7\xcc\xa3\xcc\x03\x00\x5c\x15\xf6\x5a\x5a\xc2\x0a\x4e\x9c\xdb\xe2\x2d\xf6\xc8\xa2\xcc\x9b\x52\x08\x02\xe3\xdf\x95\x35\xf0\x55\x7f\xf2\xf7\xc9\xdb\x46\x2f\x95\xff\xf5\xc6\x8b\xbc\xf6\xff\x18\x36\x5d\x7a\x05\x8c\x5f\x21\x78\x9c\xf0\x78\x89\xf7\x13\xf6\x97\xf8\xcb\x27\x7e\xe2\x64\xdc\xfa\x77\x18\xa3\xcc\x18\x1f\xfa\x7c\xba\x40\xfb\xa9\x7d\xc3\xff\x00\x00\x00\xff\xff\x03\x36\xfa\x45\x36\x02\x00\x00")

func defnMdBytes() ([]byte, error) {
	return bindataRead(
		_defnMd,
		"defn.md",
	)
}

func defnMd() (*asset, error) {
	bytes, err := defnMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "defn.md", size: 566, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _doMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x3d\xaa\xc3\x30\x10\xc4\xf1\x5e\xa7\xf8\x83\x1b\x49\x3c\x1e\x49\x99\x26\x90\x22\x67\x48\x2d\x92\x75\xbc\x20\xcb\x46\x1f\x41\xc7\x0f\x76\xc0\xd5\xee\xf0\x9b\x62\x06\xec\x6b\x61\x5c\xf2\xec\xbd\x43\x3e\x21\xb6\x50\xa5\x30\xb7\x58\x75\x8d\xb2\x53\x31\x0f\x8d\xf1\x50\x24\x3c\xa7\x1d\xd0\x44\x6d\x39\xfd\x91\x65\xbb\x9a\xde\xd4\x49\x18\x35\x85\xa3\xaf\x4b\x22\x14\xb4\x16\xb2\x94\x16\xeb\xbf\x31\xc3\xc0\x2d\x71\xef\x61\x5e\xa3\x18\x03\x56\x47\xec\x95\xce\xc5\x6d\x8b\x0c\x80\x5d\x73\xa2\xbb\xdf\xef\x3d\x9d\xf3\x69\x4b\xce\x99\x6f\x00\x00\x00\xff\xff\xa5\x89\x0a\x9e\xb7\x00\x00\x00")

func doMdBytes() ([]byte, error) {
	return bindataRead(
		_doMd,
		"do.md",
	)
}

func doMd() (*asset, error) {
	bytes, err := doMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "do.md", size: 183, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _eqMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x6e\x23\x31\x0c\x44\x7b\x7d\xc5\x9c\x5d\xd8\xc6\x19\xfb\x0f\x57\x5c\x11\x20\x40\xca\x94\x06\xad\x1d\x59\x42\x64\xca\x16\xb9\x71\xf2\xf7\xc1\x7a\x1d\x20\x4d\x1a\x12\x18\x80\x33\x8f\xb3\xc6\x96\x57\xa4\xd6\xcf\xf7\xf1\x77\x07\xa7\xb9\xa1\x24\x08\x8c\x8e\x96\xf0\x2e\x75\xa2\x41\x3a\x51\x46\xaa\x97\x28\x15\xde\xe0\x99\x48\xa5\x9b\x87\xd7\x52\x2b\x3a\x7d\xea\x8a\x43\x92\x6a\x3c\x40\x0c\xd6\x9a\xce\xbb\x38\xa8\xb1\x4d\xea\xec\x06\x59\xe2\x3c\x8b\xa3\x18\xb4\xf9\x2f\xb6\x03\x5e\x3c\xb3\xdf\x8a\x11\xb7\x9f\x09\xde\x27\x1e\x86\x10\xd6\x6b\xfc\x53\xfc\xff\x90\xf3\xa5\x32\x04\x00\xd8\x8e\x4c\xc8\x58\x65\xd6\xda\x56\xbb\x45\xe3\xf5\x5b\x40\xde\x85\xf0\x5c\xde\x88\x73\x33\xc7\xa5\x73\x2c\x51\x9c\xb6\x87\xe7\x62\x48\x93\x46\x2f\x4d\x11\x45\x21\xd5\x1a\x8e\x84\xf2\x24\xce\x11\xc7\xcf\xf9\xe0\x42\x1d\x8b\x9e\xee\x98\x9b\x3f\x1b\xc4\x2c\x5d\xa2\xb3\x0f\x78\xd2\xc5\x25\x8a\x71\xff\xc0\x5c\xc8\x8f\x7c\xc0\x73\x9c\xab\x9d\x7f\x96\x5a\xef\x45\x2c\xc5\xf2\x3a\x49\x1d\xc2\x57\x00\x00\x00\xff\xff\xbb\x15\xe6\xd1\x8f\x01\x00\x00")

func eqMdBytes() ([]byte, error) {
	return bindataRead(
		_eqMd,
		"eq.md",
	)
}

func eqMd() (*asset, error) {
	bytes, err := eqMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "eq.md", size: 399, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _filterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4e\xeb\x30\x10\x85\xf7\x7e\x8a\x23\x65\x13\xeb\x5e\x55\x6a\xcb\x92\x0d\x42\x2c\xd8\xb3\xab\xaa\xca\xa4\x63\x32\xd2\x30\x0e\xfe\x69\x13\x9e\x1e\x39\x11\x81\xb2\xb3\xe7\x1c\x7d\xdf\x68\x1a\xb4\x9e\x25\x53\x84\x2f\xda\x21\xd1\xc7\x3f\x0b\x71\x9f\x2c\x13\x96\x20\xd5\x61\x21\xed\x28\x99\xc7\x48\x2e\x53\x82\xab\x95\x69\x0d\x70\xed\x43\x22\x74\x41\x33\x69\x06\x27\xe4\x9e\x10\x29\x15\xc9\x08\x1e\x6e\x18\x64\x62\x7d\x9b\xc7\x43\x0c\x17\x3e\xd3\x79\x16\x66\x0e\x8a\x1c\xe6\xe0\xe2\xa4\x50\xaa\xfd\x9b\xda\x6a\xdf\xe0\xd9\xff\x01\xd7\x5f\x85\x73\xe7\x66\x52\x35\xc7\x92\xfb\x09\xad\x86\x0c\xef\x24\xd1\x7f\xd4\xa7\xb2\xd8\x5a\xd7\x1f\x15\xae\x2c\x82\x57\x02\x6b\x27\xa5\xaa\x58\x7f\xf1\xeb\xbe\xdf\xee\x8d\x31\x4d\x83\x07\xc5\xd3\xe8\xde\x07\x21\x63\xb0\xde\xad\xf5\x8a\xc3\x78\x44\x7b\x8f\x11\x7b\x6b\x71\xd8\x62\x87\x3d\xee\x8e\xd6\x98\x97\x9e\xd3\xe2\x89\x94\x4b\x5c\xf8\xb7\xb7\x3b\xb5\x5b\xec\xec\xc9\x7c\x05\x00\x00\xff\xff\x52\x60\x95\x94\x8a\x01\x00\x00")

func filterMdBytes() ([]byte, error) {
	return bindataRead(
		_filterMd,
		"filter.md",
	)
}

func filterMd() (*asset, error) {
	bytes, err := filterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "filter.md", size: 394, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _firstMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4f\x84\x40\x14\x84\xfb\xfd\x15\x93\x5c\x21\x24\x86\x42\x2f\x46\x2a\x63\x61\x61\x6f\x7f\xc0\x32\x2b\x2f\x3e\x76\x61\x77\xf1\xf0\xdf\x9b\x03\xa3\xb9\xc6\x76\x26\xf3\xbd\x37\x73\x40\xe1\x24\xa6\x8c\xc4\xb9\x44\x64\x5e\xa2\x4f\xc8\x03\xb1\xcb\x54\x8e\xf4\x19\xc1\x6d\x62\xe2\xbc\xd0\x5b\x9a\xb7\x41\x12\xdc\xe2\x6d\x96\xe0\x71\x16\xd5\x9f\xf0\x3f\xd9\x89\x56\x9c\xb0\xff\xa5\xdc\x22\x44\x78\x51\xc8\x35\x1d\x92\xc0\x71\xca\x5f\x15\x5e\x33\xce\x61\xd1\x1e\x1d\xd1\xd1\xd3\x89\x95\x56\x91\x03\xec\x40\xfb\x01\x17\x22\x5a\x7c\xb6\x2a\x7f\x58\x2c\x49\xfc\x3b\x9a\x22\x71\x7e\xda\x8a\x35\xe8\xe8\x42\x24\x6c\xab\xba\x79\xdb\x87\xcd\xe5\x7e\x13\x99\x72\x53\x19\x73\x38\xe0\xd9\xe3\x65\x6d\xc7\x49\x69\x0c\x50\xf4\x74\x58\x71\x53\xd4\x35\x1e\x8e\xb8\xbf\xc3\xf1\xb1\x2c\x2f\xc6\xde\x6f\x2d\x8d\xc1\x36\x04\xf7\xd0\xd5\x0e\xa7\xba\x3e\x55\xe6\x3b\x00\x00\xff\xff\x47\xb0\xd2\xd8\x60\x01\x00\x00")

func firstMdBytes() ([]byte, error) {
	return bindataRead(
		_firstMd,
		"first.md",
	)
}

func firstMd() (*asset, error) {
	bytes, err := firstMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "first.md", size: 352, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fnMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x6b\x1b\x31\x10\x85\xef\xfa\x15\x8f\xf8\xd0\x5d\xb7\x31\xb5\x9b\x86\xde\x42\x0e\xfd\x07\x85\x1e\x8c\x09\x63\x69\xb6\x16\x48\x33\x8b\x46\x8a\x9d\x7f\x5f\x56\x1b\x0a\xa5\xbd\x49\x33\x8f\x6f\xe6\xbd\xd9\x60\x98\x04\x42\x99\x9f\x90\xb9\xd2\x13\x8e\xcb\x67\xbb\x3d\x61\xd2\x92\x3f\x8e\xf0\x85\xa9\xb2\x81\x04\x24\x2a\x6f\x59\x9b\x61\x6a\xe2\x6b\x54\x71\x3f\x63\x4a\xef\x92\xff\x2b\x50\x2f\x54\x71\x66\xcc\x64\xc6\x01\x54\xb4\x49\x40\x14\x10\xa6\x58\xac\xde\xfb\x44\x66\xc8\x24\xc2\x65\xe7\xdc\x66\x83\x67\xc1\xf7\x1b\xe5\x39\xb1\x73\xc0\x10\x78\x42\xd0\x76\x4e\xec\x00\x60\x48\x5c\x71\xcc\x2d\xe1\x70\xea\x05\x74\x0f\x77\xab\xc4\xf0\x4a\xa9\xb1\xdd\xe1\x78\x3b\x61\xd8\x6e\x71\x43\x6e\x69\x1c\xc7\xb1\xc3\xaa\xde\xbf\xb2\xaf\x5a\x56\x56\xa6\xf9\x9d\x8d\x0f\xc3\x1e\x07\x7c\xc1\x03\xbe\xe2\xb1\xcb\x7f\x5c\xa2\x81\xd7\x4d\x70\x5d\x9c\x16\xae\xad\x2c\x9e\x18\x2b\x05\x2f\xc7\x03\x1e\xf0\x88\x6f\xd8\x7f\xc6\xfe\x70\x7a\xd9\x39\xf7\xfc\x4f\x0a\x86\xb9\x68\x68\x9e\x41\xf0\x49\xad\x15\x5e\x83\x89\xe2\x53\x0b\x6c\x2b\x92\x4a\xa4\xee\xe1\xcc\x51\x7e\x21\x14\xba\x0a\xa6\xa2\xb9\xb7\x93\x7a\x4a\x30\xaf\x33\xef\xd0\x77\xcb\x4c\x62\x2b\xe8\x7a\x61\xc1\x9b\xb6\x9e\x73\x97\xff\xb9\xc0\x1a\xf9\x27\xc4\x0a\xaf\x52\xa3\xb4\x65\x9e\x2e\x66\x28\xca\x5f\x93\x61\x75\xb9\xa4\x4e\xbd\xea\x35\x70\x7f\x58\x2b\x9d\xc1\x01\xb1\xee\xdc\xef\x00\x00\x00\xff\xff\x59\xa1\xd6\xbf\x35\x02\x00\x00")

func fnMdBytes() ([]byte, error) {
	return bindataRead(
		_fnMd,
		"fn.md",
	)
}

func fnMd() (*asset, error) {
	bytes, err := fnMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fn.md", size: 565, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _futureMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4e\x03\x31\x0c\x45\xf7\x39\xc5\x57\xbb\x99\xa9\xa0\x77\x60\xc1\x05\x10\x17\x70\x13\x0f\x13\xe1\xda\x55\xe2\xb4\x9d\xdb\xa3\xc9\xa0\x56\x90\xe5\x73\xfe\x7f\x89\xf7\x18\xa6\xe6\xad\x30\x26\x2b\xe7\x11\x7c\x25\x69\xe4\x5c\x41\x9d\x80\xea\xa2\x71\x2e\xa6\xd6\xaa\x2c\xe1\x83\xbd\x15\xed\xd3\x2d\x96\x15\x3e\x6f\x69\xd8\xd4\xb9\x46\xcf\xa6\x47\x7c\xce\x8c\x4b\xb1\x6b\x4e\x9c\xb6\x0b\xb7\x2c\x82\x13\x3f\x2c\x69\x8d\x13\x2a\x5f\xa8\x90\x33\x7c\x2e\x4c\x69\xed\xe1\x3b\xc7\xb6\xd6\xbc\x80\x34\x81\x74\x41\x24\x91\x0a\xb7\xcd\xf7\x6b\xd9\x2a\x0f\x27\xb1\xf8\x7d\x40\x53\xcf\xf2\x7c\xcf\x4c\x15\x27\x66\x45\xb4\xf3\x45\xd8\x59\x96\xa7\xfa\x18\xc2\x7e\x8f\x37\xc5\xfb\x9d\xd6\x69\x08\xc0\x90\x78\x5a\x3f\xf6\x58\xca\x90\x2c\x00\xc0\xe0\xf6\x7a\xe5\xe8\x56\x30\xf4\x8d\x74\x0a\x0c\x7c\xce\x8e\x5d\xe1\xb4\x1b\xff\x22\x2b\xa4\x5f\xfc\x9f\x2e\x2c\x62\xb7\xdd\xd8\x4f\x37\x4e\xcd\xc7\xf0\x13\x00\x00\xff\xff\xa2\x72\x30\x2c\x86\x01\x00\x00")

func futureMdBytes() ([]byte, error) {
	return bindataRead(
		_futureMd,
		"future.md",
	)
}

func futureMd() (*asset, error) {
	bytes, err := futureMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "future.md", size: 390, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hasMetaMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xb1\x8e\xdb\x30\x10\x44\x7b\x7d\xc5\xd8\x29\x6c\x39\x89\x81\xe4\x07\x52\x07\x48\xe9\x2e\x08\x84\x95\xb8\x32\x89\x50\x4b\x81\xbb\xb4\x9d\xbf\x0f\x28\xf9\xce\x87\x83\x9b\x6b\xb5\x33\xa3\x79\xc3\x4f\xd8\x4f\x6c\xf4\x03\x63\xca\xd3\xe7\x16\xc6\x6a\x8a\xab\x67\xf3\x9c\x61\x9e\x31\xe7\x74\x09\x8e\xdd\xa2\x50\x78\xba\x30\xaa\xc5\x91\x51\xf3\x73\x04\xc5\x78\x3f\xf1\x85\x62\x21\x63\x58\x02\x89\x24\x23\x63\x87\xfa\x91\xf5\x4b\xcd\x12\x98\x0f\x8a\xb1\xc8\x60\x21\x09\xae\x21\x46\x64\xb6\x92\x05\x9d\xe5\xc2\xdd\x11\x27\xcf\x18\x43\x56\x83\x24\xf9\xfa\x88\xb9\x6b\xb5\x44\x43\x90\xa5\xd9\x6b\xce\x1a\x11\xe4\x8c\x6e\xa4\xa8\xdc\x1d\x9b\x06\xd8\x3b\x1e\x05\x2e\x95\x3e\x32\x7e\xdf\xfe\x60\x7f\x38\xe0\x86\xef\x6d\x5b\x8f\x2b\xf5\x7a\x6d\x9b\xe6\x54\x8b\xf1\x8d\xa6\x39\xf2\x93\x5e\xe8\x79\xa0\xa2\x8f\x7f\x2a\x06\x12\xf4\xfc\x00\x3d\x36\xcd\xaf\xf0\x97\x31\x25\x35\xcc\x99\x5d\x18\xc8\x56\xf0\xb7\xcc\xd5\x46\x51\x53\xf5\x0a\x9f\x17\xb6\xfe\x5f\x35\xcc\x2c\xae\x32\x54\xb4\xdd\x66\x87\xc1\x53\xa6\xc1\x38\xd7\x51\x82\x62\x62\x12\x85\x79\xb2\x65\xf3\x34\x3e\x7b\x9e\xa9\x2c\xcb\x2d\x92\x74\x7d\x69\x17\x92\xac\x93\x6c\x56\xec\xad\xe7\x18\xd3\x16\xdf\x3e\x40\xae\x96\x83\x9c\x15\x24\x0e\x52\xa6\x9e\xf3\xb2\xc1\xce\xde\xad\xf0\x3f\x00\x00\xff\xff\x1c\x3b\xa0\xd5\x52\x02\x00\x00")

func hasMetaMdBytes() ([]byte, error) {
	return bindataRead(
		_hasMetaMd,
		"has-meta.md",
	)
}

func hasMetaMd() (*asset, error) {
	bytes, err := hasMetaMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "has-meta.md", size: 594, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ifMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xbd\x4e\xc3\x30\x14\x46\x77\x3f\xc5\x51\x33\xc4\x96\x22\x24\x28\x7f\x13\x88\x81\x81\xc7\x70\x9a\xeb\xc6\x92\xe3\x44\xb6\x43\xd3\xb7\x47\x4e\x07\x58\xd8\x6c\xdd\xef\x9c\xfb\xdd\x06\xed\x1d\x4b\x92\x81\x32\x4a\x44\x42\x96\x77\xc3\x22\xc9\xcd\x69\xca\x64\x3f\x2d\x41\xe8\x93\x8d\xa7\xd1\xc7\xb3\xfa\x72\x35\x88\x7c\xdb\xb0\xda\x22\xc3\xce\xfa\x93\x2d\x82\xcf\x94\xb4\x96\xf1\x8a\x8e\x73\xc1\xd9\x90\xa5\xa3\x3e\xa3\x0f\xa6\xdb\xb9\xb6\x6e\x69\xa9\xf2\x9a\xff\xd5\xd8\x38\x90\xa4\xac\x29\xca\xd0\x31\x97\x51\xd2\xc5\x67\xb9\x41\xb5\xd5\x0d\xea\xf0\x0e\x1b\xaf\x1d\x17\x1f\x02\xbd\xfc\xa3\xb8\x53\xaa\x69\xf8\x88\x7c\x6e\xb6\x5e\xa0\x14\xe8\x41\x1c\x1b\xad\xbe\xe7\x81\x23\x8f\x3c\xf1\xcc\x0b\xaf\xc6\xec\x53\xef\xd0\x6f\xe8\x20\x91\xcd\x70\x34\x0a\xe0\xb0\xd5\x9a\xbd\x3f\x1f\xfe\x7c\xf3\x64\x43\x38\x18\xf5\x13\x00\x00\xff\xff\x25\xb1\x7f\x05\x3d\x01\x00\x00")

func ifMdBytes() ([]byte, error) {
	return bindataRead(
		_ifMd,
		"if.md",
	)
}

func ifMd() (*asset, error) {
	bytes, err := ifMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "if.md", size: 317, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isAssocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\xce\xd4\x30\x10\x84\x7b\x3f\xc5\xfc\xb9\xe2\xe7\xc4\x11\x09\xe8\x68\x10\x05\x05\x12\xe5\x75\x08\x45\x1b\x67\x13\x5b\x38\x76\xe4\xdd\xe4\x38\xa1\x7b\x77\x64\xe7\x38\x01\xa2\xa0\xb4\xbc\x33\x3b\xfb\xcd\x01\x2f\x48\x24\xd9\xf7\x18\x53\x9e\x5f\x1e\xa1\x2c\x2a\xb8\x38\x56\xc7\x19\xea\x18\x4b\x4e\x9b\x1f\x78\xa8\x13\x02\xca\x8c\x2a\xf1\xa4\x7e\x63\x31\x9f\x46\x50\x08\xf7\x5f\xde\x28\xac\xa4\x0c\x4d\xa0\xb8\x0f\x9e\x8a\x4d\x84\x3a\x2f\x18\xd7\x68\xd5\xa7\x88\x8b\x0f\x01\x99\x75\xcd\x11\x9d\xe6\x95\xbb\x16\x67\xc7\x18\x7d\x16\x45\x4c\xf1\x55\xd5\xfe\x9a\x93\x35\x28\x7c\xac\x81\x1e\x1e\xbb\xdc\xc7\x09\xdd\x48\x41\xb8\x6b\x8d\x39\x1c\xf0\x21\xe2\xe3\x77\x9a\x97\xc0\xc6\xe0\x71\xdf\x8f\x77\x91\x66\x46\xd3\xfb\x10\x9a\xdb\xe3\xb9\xf0\x34\x5d\x9b\x1b\xbe\xbc\xc6\x1b\xbc\xfd\x7a\x34\xe6\x5c\x72\xf2\x6e\xf0\x67\xcc\x7d\x09\x7a\xb6\xb4\x0a\xd7\x2c\xea\x7c\xde\xc9\xc0\x0b\x08\x1b\x5b\x4d\xb9\x35\xe6\xb3\xff\xc6\x98\x93\x28\x96\xcc\x83\xb7\xa4\x2c\xa7\xbf\x18\xd8\x42\x28\x48\x42\xcf\x88\x3c\x91\xf2\x80\xfe\x5a\x04\x0b\xc7\xa1\xdc\x55\x56\x3c\x3f\x3d\xc3\x3a\xca\x64\x95\x73\x81\xe4\x05\x33\x53\x14\xa8\x23\xad\xec\xd3\xf8\xaf\xa6\xe6\xb5\x92\xd4\x62\xff\x7b\x63\x6d\xc5\xf2\x74\xe7\xd2\x38\x0e\x21\x35\xff\x05\x60\xef\xc9\xfc\x0c\x00\x00\xff\xff\xca\xc6\x42\xcb\x35\x02\x00\x00")

func isAssocMdBytes() ([]byte, error) {
	return bindataRead(
		_isAssocMd,
		"is-assoc.md",
	)
}

func isAssocMd() (*asset, error) {
	bytes, err := isAssocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-assoc.md", size: 565, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isListMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4f\x6b\x1b\x31\x14\xc4\xef\xfa\x14\x63\xfb\x60\x9b\xba\x0b\xfd\x5f\x9f\x4a\x0f\x3d\x14\x7a\xf4\xcd\x94\xe5\x59\xfb\xd6\x12\xd1\x4a\x8b\xde\x5b\x3b\xf9\xf6\x41\xda\x38\x90\x10\x72\x15\x33\x4f\xf3\x9b\x59\x61\x13\xbc\xe8\x2f\xf4\x29\x0f\x1f\xb6\x50\x16\x15\x5c\x1d\xab\xe3\x0c\x75\x8c\x31\xa7\x8b\xef\xb8\xab\x0a\x01\x65\x46\x71\x88\xf9\xdb\x83\x42\x78\x7a\xe6\x0b\x85\x89\x94\xa1\x09\x54\x05\xbb\xe2\x8e\x50\xe7\x05\xfd\x14\xad\xfa\x14\x71\xf5\x21\x20\xb3\x4e\x39\xa2\xd5\x3c\x71\xdb\xe0\xe0\x18\xbd\xcf\xa2\x88\x29\x7e\x2c\xd6\x9b\x4c\xa6\xa0\xf0\xb1\xc6\x78\x3e\x31\xbb\x7d\x3c\xa3\xed\x29\x08\xb7\x8d\x31\xab\x15\x7e\x47\xfc\xb9\xa7\x61\x0c\x6c\x0c\x6e\x50\xeb\xcd\x27\x7c\xc6\x17\x7c\xdd\xe2\xf8\x0d\xdf\xf1\x03\x3f\xff\x6f\x8d\x39\x94\x4c\x3c\xab\x5f\x46\x9a\x2f\xe2\xc4\x96\x26\xe1\xfa\xb1\xb0\x4d\x71\xa6\x87\x17\x10\x2e\x6c\x35\xe5\xc6\x98\x7f\xfe\x8e\x31\x24\x51\x8c\x99\x3b\x6f\x49\x59\x76\xaf\x80\x2d\x45\x50\x90\x84\x13\x23\xf2\x99\x94\x3b\x9c\x1e\x8a\x61\xe4\xd8\x15\x8a\xf2\xc7\x7a\xb1\x86\x75\x94\xc9\x2a\xe7\xd2\x88\x17\x0c\x4c\x51\xa0\x8e\xb4\xd6\x9c\xfa\xb7\xd6\x18\xa6\x5a\x9b\x96\xf3\x75\x95\xa6\xd2\x2f\x66\xfc\xa5\xe3\x10\xd2\x12\xc7\xfd\xfe\x7d\xec\x79\x09\xf3\x18\x00\x00\xff\xff\xa7\xb7\x6e\xbb\x0d\x02\x00\x00")

func isListMdBytes() ([]byte, error) {
	return bindataRead(
		_isListMd,
		"is-list.md",
	)
}

func isListMd() (*asset, error) {
	bytes, err := isListMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-list.md", size: 525, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isMappedMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xbf\xce\xd4\x30\x10\xc4\x7b\x3f\xc5\x7c\xb9\xe2\xe3\xc4\x11\x09\xe8\x68\x10\x05\x05\x12\xe5\x75\x08\x45\x9b\x64\x12\x5b\x38\xb6\x65\x6f\xee\x38\xa1\x7b\x77\x94\x3f\x1c\x02\x51\x50\xda\xda\x9d\x9d\xf9\xcd\x01\x2f\x26\x49\x89\xfd\x7b\x0c\x31\x4f\x2f\x8f\x50\x16\x2d\xb8\x5a\xaa\x65\x86\x5a\x22\xe5\x78\x71\x3d\xfb\x75\xa2\x40\x32\xb1\xed\x98\x4f\x03\xc4\xfb\xfd\x9f\x17\xf1\xb3\x28\xa1\x11\xb2\x4f\x40\x6f\x89\xa7\x45\x25\x40\xad\x2b\x18\xe6\xd0\xa9\x8b\x01\x57\xe7\x3d\x32\x75\xce\x01\x8d\xe6\x99\x4d\x8d\xb3\x25\x06\x97\x8b\x22\xc4\xf0\x6a\x57\xd8\x07\xcb\xec\x15\x2e\xac\x86\x1e\x22\xdb\xbe\x0b\x23\x9a\x41\x7c\x61\x53\x1b\x73\x38\xe0\x43\xc0\xc7\xef\x32\x25\x4f\x63\xf0\x3b\xe0\x8f\x77\x41\x26\xa2\x6a\x9d\xf7\xd5\xfd\xf1\x4c\x1c\xc7\x5b\x75\xc7\x97\xd7\x78\x83\xb7\x5f\x8f\xc6\x9c\x17\xa7\xdc\x14\xfe\x34\xba\x5d\x41\xcb\x4e\xe6\xc2\xd5\x8c\x5a\x97\x37\x34\x70\x05\x82\x0b\x3b\x8d\xb9\x36\xe6\xb3\xfb\x46\x4c\xb1\x28\x52\x66\xef\x3a\x51\x96\xd3\x5f\x14\x3a\x09\x10\x5f\x22\x5a\x22\x70\x14\x65\x8f\xf6\xb6\x2c\x24\x86\x7e\x09\xb6\x9c\x78\x7e\x7a\x46\x67\x25\x4b\xa7\xcc\x0b\x26\x57\x30\x51\x42\x81\x5a\xd1\xb5\x82\x38\xfc\xab\xaa\x69\x5e\x59\xea\x22\xbf\x51\xa8\x57\x22\x4f\xbf\x90\x54\x96\xde\xc7\xea\xbf\xb2\x6f\x25\xfd\x0c\x00\x00\xff\xff\xd8\xa8\x0c\xae\x31\x02\x00\x00")

func isMappedMdBytes() ([]byte, error) {
	return bindataRead(
		_isMappedMd,
		"is-mapped.md",
	)
}

func isMappedMd() (*asset, error) {
	bytes, err := isMappedMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-mapped.md", size: 561, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isNilMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x3f\x8f\xd3\x40\x10\xc5\xfb\xfd\x14\xef\x2e\x45\x2e\xe2\xb0\xc4\x9f\x26\x15\xa2\xa0\x40\xa2\x4c\x87\x90\x35\xb1\xc7\xd9\x11\xe3\x59\x6b\x77\x9c\xc0\xb7\x47\xbb\x0e\x48\x20\x74\xed\xee\xcc\x9b\xdf\xef\xed\xf0\x64\xa2\x1f\x30\xa5\x3c\xbf\x3a\xc0\xb9\x78\xc1\x2d\xb2\x47\xce\xf0\xc8\x58\x72\xba\xca\xc8\x63\x9b\x28\xa0\xcc\x30\xd1\xf0\x79\x02\xa9\xde\x1f\xf9\x4a\xba\x92\x33\x3c\xd5\xcf\xe7\xba\x68\xf0\x28\x05\xd3\x6a\x83\x4b\x32\xdc\x44\x15\x99\x7d\xcd\x86\xde\xf3\xca\x7d\x87\x53\x64\x4c\x92\x8b\xc3\x92\xbd\x36\xd1\xdf\x53\x65\x55\x87\x58\x03\xf8\x93\xb0\x2d\x8b\x5d\xd0\x4f\xa4\x85\xfb\x2e\x84\xdd\x0e\x1f\x0d\x9f\x7e\xd0\xbc\x28\x87\x80\xbb\xcd\xfe\xe9\x0d\xde\xe2\x1d\xde\x1f\x2a\xcf\x21\x84\x53\x65\xe1\x6d\xec\x6f\x94\x2d\x0a\x67\x1e\x68\x2d\xbc\x5d\x6c\x48\x55\x0d\x52\x40\x50\x29\xde\x85\xf0\x45\xbe\x33\xe6\x54\x1c\x4b\xe6\x51\x06\x72\x2e\xcf\xff\x58\x0e\x64\x20\x2d\x09\x67\x86\xf1\x85\x9c\x47\x9c\x7f\xd6\x85\x85\x6d\xac\xec\xf5\xc0\xfe\x61\x8f\x21\x52\xa6\xc1\x39\xd7\x1a\xa4\x60\x66\xb2\x02\x8f\xe4\xad\xd8\x34\xfd\xaf\xfd\x79\x6d\x5d\x79\x8b\x17\xed\x9a\xf1\x43\x53\x7e\x8c\xac\x9a\x1e\xf1\xf5\x78\xfc\xf6\xa2\xf0\xd6\x7d\xf8\x15\x00\x00\xff\xff\x23\xf7\x47\xf4\xf9\x01\x00\x00")

func isNilMdBytes() ([]byte, error) {
	return bindataRead(
		_isNilMd,
		"is-nil.md",
	)
}

func isNilMd() (*asset, error) {
	bytes, err := isNilMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-nil.md", size: 505, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isSeqMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcd\x4e\x02\x41\x10\x84\xef\xf3\x14\x05\x1c\x80\x88\x24\xfe\xcb\xc9\x78\xf0\x60\xe2\x91\x9b\x31\x9b\x66\xb7\x97\x99\x38\x3b\xb3\x4c\xf7\x82\xbe\xbd\x99\xe5\x27\xd1\x70\xf0\xdc\xd5\x95\xef\xab\x11\x26\xc2\x9b\x27\xd4\x31\x35\x17\x53\x28\x8b\x0a\x76\x96\xd5\x72\x82\x5a\x46\x9b\xe2\xd6\x55\x5c\xf5\x09\x01\x25\x86\xf0\xa6\xe3\x50\xb2\x98\xd7\x1a\xe4\xfd\xe1\xc4\x5b\xf2\x1d\x29\x43\x23\x08\x5b\xf2\xae\x3a\x45\x67\xb9\x2b\x40\xad\x13\xd4\x5d\x28\xd5\xc5\x80\x9d\xf3\x1e\x89\xb5\x4b\x01\x85\xa6\x8e\x8b\x39\x96\x96\x51\xbb\x24\x8a\x10\xc3\xe5\xf1\xfd\x18\x95\xce\x2b\x5c\xe8\xc1\x4e\x35\xfb\x06\x17\xd6\x28\x6a\xf2\xc2\xc5\xdc\x98\xd1\x08\xcf\x01\x2f\x5f\xd4\xb4\x9e\x8d\xc1\xc1\x72\x3c\xb9\xc2\x35\x6e\x70\x3b\xc5\xfb\x1d\xee\xf1\x80\xc7\x8f\xa9\x31\xcb\x8c\xc5\xfb\xf0\x39\x2a\x63\xde\xdc\x27\xa3\x89\xa2\x68\x13\x57\xae\x24\x65\x99\xfd\xd1\x29\x29\x80\xbc\x44\xac\x18\x81\xd7\xa4\x5c\x61\xf5\x9d\x1f\x5a\x0e\x55\xe6\xcb\xd8\xe3\xc1\x18\xa5\xa5\x44\xa5\x72\xca\xbe\x4e\xd0\x30\x05\x81\x5a\xd2\x7e\xce\x58\x9f\x5b\xbe\xe9\xfa\x51\x34\xd7\xff\x1e\x57\xe6\xbd\xe1\xa0\x57\x1c\x5a\xf6\x3e\x0e\xb1\x58\xfc\x47\xec\x27\x00\x00\xff\xff\xf3\x68\x2d\x4d\xff\x01\x00\x00")

func isSeqMdBytes() ([]byte, error) {
	return bindataRead(
		_isSeqMd,
		"is-seq.md",
	)
}

func isSeqMd() (*asset, error) {
	bytes, err := isSeqMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-seq.md", size: 511, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _isVectorMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xbd\x6e\xe3\x30\x10\x84\x7b\x3e\xc5\xd8\x2e\x6c\xe3\x7c\x02\xee\xff\x5c\x1d\xae\xb8\xe2\x80\x94\xee\x8c\x40\x58\x53\x2b\x93\x08\x45\x0a\xdc\x95\x9d\xbc\x7d\x40\xc9\xce\x1f\xd2\xa4\xe6\xcc\x70\xbe\xd9\x05\x56\x27\xb6\x9a\xf2\x1f\xb4\x29\x77\x9f\xd6\x50\x16\x15\x9c\x1d\xab\xe3\x0c\x75\x8c\x3e\xa7\x93\x6f\xb8\x19\x15\x02\xca\x8c\xc9\x23\xe6\x7f\x0b\x0a\xe1\xf2\xc0\x27\x0a\x03\x29\x43\x13\xe8\x22\xd9\x94\x84\x08\x75\x5e\xd0\x0e\xd1\xaa\x4f\x11\x67\x1f\x02\x32\xeb\x90\x23\x6a\xcd\x03\xd7\x15\x76\x8e\xd1\xfa\x2c\x8a\x98\xe2\xe7\xc9\x7c\x15\xca\x10\x14\x3e\x8e\x65\x9e\x42\x26\xbf\x8f\x47\xd4\x2d\x05\xe1\xba\x32\x66\xb1\xc0\xdf\x88\x7f\xf7\xd4\xf5\x81\x8d\xc1\x33\xdc\x72\xf5\x05\x5f\xf1\x0d\xdf\xd7\xd8\xff\xc0\x4f\xfc\xc2\xef\xdb\xb5\x31\xbb\xd2\x8b\x27\xfd\xeb\x5a\x53\x26\x0e\x6c\x69\x10\x9e\xbe\x1e\xeb\x15\x56\x78\x01\x21\x78\xd1\xca\x98\x1b\x7f\xc7\xe8\x92\x28\xfa\xcc\x8d\xb7\xa4\x2c\x9b\x37\xc4\x96\x22\x28\x48\xc2\x81\x11\xf9\x48\xca\x0d\x0e\x0f\xc5\xd0\x73\x6c\x0a\x44\xf9\x60\x39\x5b\xc2\x3a\xca\x64\x95\x73\x99\xc4\x0b\x3a\xa6\x28\x50\x47\x3a\x2e\x9d\xda\xf7\x4e\xd2\x0d\xe3\x6e\x5a\xe2\x2f\xa7\xa9\x46\xfc\xd9\x95\x7f\xee\x38\x84\x34\xc7\x7e\xbb\xfd\x30\xb7\xb0\x4d\xb1\x79\x01\x3e\x85\x56\xe6\x31\x00\x00\xff\xff\xff\xfd\x96\xf8\x3d\x02\x00\x00")

func isVectorMdBytes() ([]byte, error) {
	return bindataRead(
		_isVectorMd,
		"is-vector.md",
	)
}

func isVectorMd() (*asset, error) {
	bytes, err := isVectorMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "is-vector.md", size: 573, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _lenMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x01\x1f\xfe\x18\x82\xe1\x6f\xf3\x02\x3d\xf4\xd0\x7b\xa1\xc7\x20\xab\xe3\x48\x20\xef\x3a\xd2\x8a\x34\x7d\xfa\x62\x3b\x50\x7a\x5c\x76\xbe\x6f\x77\x3a\x1c\x32\x05\x95\xd7\x1e\x85\xd6\x8a\x54\x58\x24\x32\xe5\x62\x11\x3a\x6d\x53\xe5\xb5\x51\x02\xdd\x47\xca\xf9\x91\xdb\x16\xd2\xe6\x91\x65\x8d\x31\x73\xa6\x58\x45\x12\x78\x04\x6d\x62\x7e\xcc\xbf\xe8\x80\xb7\xbf\x2e\xa4\x8a\xec\xbf\x53\xbe\x23\xe8\xbc\x34\xe3\xe7\x11\xbe\xde\x25\xc4\xa2\xa2\xad\x1e\xa1\x05\x6a\x91\xe5\x96\x2a\x91\x24\xf8\x65\x53\xea\x84\x91\x49\x2e\xfb\x95\x15\xb3\x98\x2a\xa6\x26\xc1\x92\x0a\x6e\xdb\x93\x7e\x85\xbc\x80\xa5\x68\x19\x9c\xeb\x3a\xbc\x08\x5e\xbf\xfc\xbc\x64\x3a\x87\xbd\xf8\xbf\xc3\x7f\x3c\xe1\x19\xa7\xbe\x77\xee\x7d\xd5\x70\x4f\x3c\x2c\x7b\xd5\xf3\xe9\x3c\xb8\x9f\x00\x00\x00\xff\xff\xd3\xc2\xfc\x7f\x2b\x01\x00\x00")

func lenMdBytes() ([]byte, error) {
	return bindataRead(
		_lenMd,
		"len.md",
	)
}

func lenMd() (*asset, error) {
	bytes, err := lenMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "len.md", size: 299, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _letMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x3f\x4f\xc3\x30\x10\xc5\x77\x7f\x8a\x27\x75\x48\xa3\xa2\x48\xfc\x67\x40\x48\x0c\x0c\x2c\x4c\x48\x0c\x55\x87\xc3\xb9\x36\x96\x1c\xbb\xe4\x2e\x4d\xc2\xa7\x47\x71\xd2\x52\xf0\x62\xf9\xe4\xdf\xf3\x7b\xcf\x0b\x2c\x3d\x2b\xd6\x8f\x81\x6a\xc6\x36\x36\xf5\xd3\x6a\x93\xf6\x55\x0e\x12\x71\xbb\x20\xf0\xd1\x92\xc7\x81\x1a\x47\x9f\x9e\xc5\x7c\x38\xef\x61\x1b\x26\x65\x10\x02\x77\xf3\x0d\xb1\x71\xcf\x17\x33\xe6\xc2\x0e\x5a\x31\x64\xcf\xd6\x6d\x1d\x97\xbf\x02\xd0\x08\xad\x48\x27\xa0\xc0\xab\xa2\x1b\x25\xb5\xe2\x00\x3e\x90\x6f\x47\xe5\xbf\xf0\x68\x49\xd0\x39\xad\x5c\x38\x83\x41\xa1\x44\xc3\xda\x36\x21\x01\x0d\x4b\xeb\x15\x71\x9b\x4e\x9e\x44\x8f\x82\x2e\x86\xc2\x98\xc5\x02\xcf\x01\x2f\x3d\xd5\x7b\xcf\xc6\x60\x8e\xdf\x23\x5b\x5e\xe2\x0a\xd7\xb8\xc9\x0d\xe6\x35\x60\x7d\x8b\x3b\xdc\xe3\x61\xb3\x49\xc3\xa5\x8d\xc1\x92\xa2\xc7\x90\xe7\xc6\xbc\x57\x4e\xc0\x93\xd4\x14\xe0\xd4\x89\x77\xa2\xb0\xe4\x3d\x97\xc8\xfa\x2c\xb9\x24\x1c\xd8\x6a\x6c\x4e\xf3\x21\xfb\xef\xde\xd3\xf7\x80\xe9\x11\x0e\xc9\xf2\x94\x24\x0a\x43\xf8\xab\xe5\x60\x59\x0a\xbc\xc5\x54\x0f\x69\x82\xb4\x8b\x67\xd5\x96\x11\x21\x2a\xb8\x1f\x1d\xc4\x56\xc5\x95\x7c\xac\x63\xfa\x98\x9a\x83\xa6\x3a\x0b\xf3\x13\x00\x00\xff\xff\xe1\x63\x00\x63\xfe\x01\x00\x00")

func letMdBytes() ([]byte, error) {
	return bindataRead(
		_letMd,
		"let.md",
	)
}

func letMd() (*asset, error) {
	bytes, err := letMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "let.md", size: 510, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _listMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\x3b\x6a\xc5\x30\x10\x85\xe1\x5e\xab\x38\xd8\xcd\xf5\x25\x64\x0f\x29\xb2\x86\xd4\x22\x3a\x46\x82\x91\x64\x46\xe3\xd7\xee\x83\x5f\x90\xf6\x9f\x33\x5f\x8f\x97\xa4\x66\x18\xab\xe6\xf7\x7b\xc0\xaf\xd2\x1b\x1b\x3c\x0a\x57\x1c\x27\xf7\x93\x44\xee\xfe\x2f\x63\x8d\xb5\x11\x14\x66\x16\x6b\xf0\x4a\x58\x24\xb8\x78\x99\xbd\x31\x9c\x64\xc3\xa4\x75\x49\x81\xe1\x03\x55\xa1\xb4\x59\xcb\xb5\xcb\x93\xed\x97\x94\x46\x94\x7a\xcf\x0f\xe6\x79\xf9\x74\xae\xef\xf1\x55\xf0\xbd\xf9\x3c\x09\x9d\x03\x5e\x81\x23\x36\x74\x91\x22\xb5\x1b\x9e\xb2\xa3\xb3\x48\xe5\x55\x4e\x75\xc3\x3e\xb8\xbf\x00\x00\x00\xff\xff\xd2\x7f\xef\x57\xdf\x00\x00\x00")

func listMdBytes() ([]byte, error) {
	return bindataRead(
		_listMd,
		"list.md",
	)
}

func listMd() (*asset, error) {
	bytes, err := listMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "list.md", size: 223, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mapMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xcd\x6a\xc3\x30\x10\x84\xef\xfb\x14\x03\xbe\x58\x2d\x04\xea\x86\xd2\x6b\x29\x7d\x83\xde\x42\x08\x4b\xb2\xaa\x05\x6b\x49\xd5\x4f\x62\xf7\xe9\x8b\xd5\x12\xf0\x75\xbe\xdd\x99\xaf\x43\x3f\x71\x84\xad\xfe\x8c\x2c\xdf\x8f\x06\xca\x3f\x4e\x17\x4c\x1c\xf3\x9a\x54\xf1\x67\xc9\xf4\x9e\x84\x8b\x64\xf0\xca\x97\x3b\xc0\x6d\x0c\x59\x70\x65\xad\x2b\x4c\x82\x32\x0a\x92\xe4\xaa\x05\xc1\x82\x63\xd4\xc5\xf9\xaf\x16\xc7\x14\xae\xee\x22\x97\xb6\x56\x5c\xf0\x28\xa1\x81\xff\xf7\x60\xb7\x67\xf7\xf5\x1d\x51\xd7\xe1\xcd\xe3\x63\xe6\x29\xaa\x10\xe1\x4f\xbb\xb7\x1e\x87\xf9\x88\xfe\x01\x33\x06\x63\x70\x78\xc2\x80\x67\xec\x8f\x86\xe8\x73\x74\x19\x37\xa7\x8a\x24\xa5\x26\xdf\xca\xb7\xf6\xa7\x7e\xc0\x1e\x2f\x78\x35\xa7\x1d\xfd\x06\x00\x00\xff\xff\x02\x29\xe2\xfc\x0b\x01\x00\x00")

func mapMdBytes() ([]byte, error) {
	return bindataRead(
		_mapMd,
		"map.md",
	)
}

func mapMd() (*asset, error) {
	bytes, err := mapMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "map.md", size: 267, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metaMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xb1\x4e\xc4\x30\x10\x44\xfb\xfd\x8a\x51\xd2\x24\xa7\x88\x82\x32\x1d\x05\x05\x3d\x1d\x42\xa7\xbd\x78\x43\x2c\x39\xeb\x53\xbc\xe6\x82\x10\xff\x8e\x7c\x4e\x07\x9d\x35\x6f\xc6\xcf\x6e\xd1\xad\x62\x8c\x39\x6e\x6b\x8f\x4d\x2c\x6f\x9a\x60\x8b\xa0\xc4\x8e\x2b\x42\x2d\xd0\xcb\x7c\x47\xe5\x0c\x9f\xc0\xaa\xd1\xd8\xc4\x0d\x25\xd6\xbf\x33\x5b\xd8\x6a\xfb\xe6\x43\xc0\x45\x0e\x83\x38\x70\x99\x83\x53\x8a\x93\x67\xf3\x9f\x82\x64\x5b\x9e\x2c\x6f\xf2\x40\xd4\xb6\x78\x52\x3c\xef\xbc\x5e\x83\x10\x01\x9d\x93\x59\xe1\x62\xbe\x04\xc1\xdb\xfe\x8e\xee\x74\xc2\x8e\xc7\xbe\x2f\xf0\xfe\x85\x0a\x7b\xa2\xd7\xc5\xa7\x2a\xac\xb6\xe3\xcd\x21\xc4\x9b\xd7\x8f\xff\x9d\x23\xd1\x19\xf8\x1e\xed\xeb\x2a\x68\xe6\xac\x93\xf9\xa8\xcd\x80\x51\x79\x95\xe3\xee\x01\xa3\x8b\x13\x9a\xe6\xe7\x4c\xbf\x01\x00\x00\xff\xff\xe1\x62\x81\x91\x39\x01\x00\x00")

func metaMdBytes() ([]byte, error) {
	return bindataRead(
		_metaMd,
		"meta.md",
	)
}

func metaMd() (*asset, error) {
	bytes, err := metaMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.md", size: 313, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\x6e\x84\x30\x10\x44\x7b\x7f\xc5\x48\x34\x58\x0a\xfc\x43\x8a\x14\xf9\x82\x14\x51\x8a\x35\x1e\x12\x4b\x66\x8d\xec\x8d\xe0\xfe\xfe\x74\x1c\x3a\x51\xee\xce\xe8\xbd\xe9\xd0\x6b\x83\xca\x42\x8f\x4a\xfb\xaf\xda\x20\xc7\xdd\x56\x99\xe8\xbe\x52\xce\x67\x70\xfd\x63\x2a\x6a\xdc\x0d\x41\x1a\x23\x8a\x22\xd9\x13\x33\xe2\x73\x86\xfd\xf1\xd2\x8d\x85\x0d\x5a\x0c\x92\x2b\x25\xde\xc0\x3d\x35\x7b\x43\x32\x6c\x0f\x7c\x20\xa6\x4a\x31\x46\x04\xce\xa5\x12\x81\x49\x7f\x4f\x2d\xe3\xe8\x5c\xd7\xe1\x5d\xf1\xb1\xcb\xb2\x66\x3a\x07\xf4\x99\x86\x6f\x3d\xd6\xb7\xb2\x70\x50\x6e\xc3\x4b\xe9\x7f\x1c\x00\xf4\x6b\x55\xa8\xf7\xee\x1e\x00\x00\xff\xff\xdc\x40\xb9\x53\xe6\x00\x00\x00")

func nsMdBytes() ([]byte, error) {
	return bindataRead(
		_nsMd,
		"ns.md",
	)
}

func nsMd() (*asset, error) {
	bytes, err := nsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ns.md", size: 230, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nthMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x31\x8f\x13\x31\x10\x85\xfb\xfd\x15\x4f\x97\x82\x44\x3a\x22\x01\xa1\x46\x57\x50\x44\x94\x20\x51\xde\xcd\xae\xdf\x66\x2d\x79\xc7\x8b\xc7\xce\x5d\xf8\xf5\xc8\xde\x24\xa2\x80\xd2\xcf\x6f\x66\xbe\x79\xf6\x06\x5b\xcd\x13\x8c\xbf\xe0\xd5\xf1\x0d\x8e\xa3\x94\x90\xbf\xec\x90\x98\x93\xe7\x99\x86\x31\xc5\x19\x52\x4d\x85\x3a\x10\xfd\x65\x35\x77\x3f\x7d\x08\xd5\x57\x92\x22\x4f\xc4\x59\x42\x21\xbc\xfe\x6d\xce\x93\x64\x0c\xa2\xe8\x89\x31\x16\x75\x90\xdc\xcc\xb6\x70\xf0\xa3\xa7\x5b\x9b\xed\x71\x1c\x9b\xbe\x72\x78\x43\x2c\x19\x71\xd5\xfa\x5a\x68\xb7\xd3\xad\xf7\x63\x3d\x29\xe8\xf3\xc4\xd4\x6e\xae\xf4\x37\x10\xbb\xc2\xd1\x21\x26\x88\x82\x29\xc5\xd4\x74\xf1\x46\xb7\xc7\x37\x72\xa9\xc0\xb3\x57\xb7\xa2\xb6\xf1\x34\x48\x22\x7e\x33\xc5\xf7\xbd\x54\x67\xd7\x6d\x36\x78\x52\x7c\x7d\x93\x79\x09\xec\x3a\x60\xeb\x38\x22\xe0\xdd\xf6\x03\x3e\xe2\x13\x0e\xbb\x5d\x15\x6b\x9c\x01\x07\x3c\xbc\xa6\xa8\xa7\x87\x5d\xd7\xfd\x98\xbc\x81\x6b\xdd\x15\xc8\xf0\x7c\xbd\x7f\x46\xcf\x41\x8a\xdd\xf6\x3e\x60\x5b\x17\xf9\x9c\xa7\x55\xd8\x55\xda\x9e\x97\xd8\xf8\x08\xaa\xbb\xc7\x70\x0f\x30\x78\xcb\x2b\xe1\xb1\xd1\x3b\x7c\xbf\xc5\xff\xb4\x2c\xc1\x0f\x92\x7d\xd4\xee\xa8\x96\x29\xad\xbe\x98\xd7\x53\xeb\xf2\xa2\x79\x7a\xc1\x58\x74\xa8\x9e\xc7\xeb\xfe\xee\x1e\xb2\xc1\xca\x30\x41\xac\x4d\x31\x88\x3a\x9c\x39\xe4\x98\xac\x3d\xab\x04\x8b\x98\xe4\x4c\x48\x3a\x95\x99\x5a\x3d\x75\x28\x1d\x9c\x4f\x1c\x72\xb8\x20\xc7\x3a\x6b\xde\xff\x3f\xb6\x7f\x44\xf6\x5a\x7f\xd7\xc5\x33\xac\x9b\x9b\xcc\x35\x3e\xab\xef\x2b\xd6\xa4\x25\xf1\xec\x63\xb9\xa7\xbb\xef\xfe\x04\x00\x00\xff\xff\x37\xe2\x28\x50\xd0\x02\x00\x00")

func nthMdBytes() ([]byte, error) {
	return bindataRead(
		_nthMd,
		"nth.md",
	)
}

func nthMd() (*asset, error) {
	bytes, err := nthMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nth.md", size: 720, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _promiseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x31\x6e\xc3\x30\x0c\x45\x77\x9d\xe2\x23\x59\x92\x20\xc8\x1d\x32\x74\xe8\xda\x1b\x30\x12\x1d\x13\xa5\x49\x41\x96\xec\xf6\xf6\x85\xe0\xc6\x45\x47\x89\x1f\xef\x3f\xf2\x88\x53\x2e\x3e\xc9\xcc\x67\xe4\xe2\xa9\x45\x9e\x41\x86\x66\x85\x67\xd7\x85\x13\x16\xd2\xc6\xe1\x83\x6b\x2b\x36\x83\xf0\x9b\x87\x18\xea\xc8\x18\xbc\x4c\xf0\x01\x84\xa1\x59\xac\xe2\x76\xc3\xfb\x00\xca\x59\x85\x13\x56\xa9\xa3\xb7\xda\x99\x54\x9e\x6d\x62\xab\x57\xd4\x51\xe6\x3d\x8e\x55\x54\x71\x79\xa8\xc7\xcf\xcb\x15\x2b\x49\x15\x7b\x76\x2e\x68\x2b\x47\x75\x3c\x18\x89\x55\x16\x2e\x5d\x49\x08\x84\x48\xaa\x7d\xd4\x2d\x5e\x52\x3b\xb4\x8e\x54\x21\x16\xb5\xa5\x6d\xa3\x57\xfb\x0d\xf7\x3d\x1d\xc9\xe0\xa6\xdf\xff\xe9\x6e\x91\x6f\x21\x1c\x8f\xb8\x1b\xde\xbe\x68\xca\xca\x21\x00\xa7\xc4\x03\xf2\xdf\xc1\xce\xfd\x2f\xe3\x30\xb2\xaa\x1f\xb6\xd7\x39\xfc\x04\x00\x00\xff\xff\x7a\xd3\x6c\x58\x52\x01\x00\x00")

func promiseMdBytes() ([]byte, error) {
	return bindataRead(
		_promiseMd,
		"promise.md",
	)
}

func promiseMd() (*asset, error) {
	bytes, err := promiseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "promise.md", size: 338, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _quoteMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcf\x41\x4e\xc3\x30\x10\x85\xe1\xbd\x4f\xf1\xa4\x2e\xda\x48\x28\x52\x81\x0b\xb0\x60\xc1\x82\x1d\x07\xe8\x34\x99\x90\x91\xec\xb1\xf1\x4c\xda\xe6\xf6\x28\x2e\x20\xb6\xb6\xec\xf7\x7f\x3b\x1c\xbe\x96\xec\x8c\x29\xd7\xd4\xa1\xb2\x2f\x55\x0d\x3e\x33\xac\xf0\x20\x93\xf0\xd8\xee\x20\x8a\x91\x9c\x90\xf2\xc8\xe1\x9d\x49\x45\x3f\xe1\x33\x39\xa2\x98\x1b\x48\x47\xd8\x9a\xce\x39\x1a\xae\x12\x23\x34\x3b\xce\x0c\xbe\x50\x5c\xc8\x79\xec\xf1\x31\x8b\x21\xd1\x50\x33\xc4\xc0\xd3\xc4\x83\xcb\x85\xe3\x7a\xdf\xa3\xc4\x20\x43\xa9\x5c\x58\xc7\xed\x7b\x52\xf0\xad\x54\x36\x93\xac\xb8\x8a\xcf\xdb\x11\x95\x6c\x5e\x73\x99\x19\x87\x7d\xd7\x87\xb0\xdb\xe1\x45\xf1\x7a\xa3\x54\x22\x87\x80\x5f\xd3\xe1\x88\x47\x3c\xe1\xb9\xeb\x42\x68\xdb\xad\xeb\x6e\x6c\x93\x51\x9c\x2b\xc5\x26\x40\x25\x9f\xb9\x6e\x24\x85\xd7\xb5\xf1\x32\xa8\x94\x9f\x3e\x5d\xd2\x99\x2b\x8e\x0f\x5b\xa4\x4c\x10\xc7\x95\x2b\x83\x30\x2d\x3a\xb8\x64\xed\x81\x37\xdf\x68\xb6\x6a\xd6\x35\xe5\xc5\xee\xd1\xdb\xf3\x7f\x90\xd3\xfe\xaf\xec\xd4\x87\xef\x00\x00\x00\xff\xff\xef\x42\x98\xfa\x83\x01\x00\x00")

func quoteMdBytes() ([]byte, error) {
	return bindataRead(
		_quoteMd,
		"quote.md",
	)
}

func quoteMd() (*asset, error) {
	bytes, err := quoteMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "quote.md", size: 387, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replClsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd0\x48\xce\x29\xd6\x54\x48\xce\x49\x4d\x2c\x2a\x56\x28\xc9\x48\x55\x28\x4e\x2e\x4a\x4d\xcd\xe3\x72\x06\x89\x80\x05\x92\x4b\x8b\x8a\x52\xf3\x4a\x14\x92\xf3\xf3\x4a\x40\x74\x7e\x1a\x92\x3a\x3d\x85\x90\x8c\xcc\x62\x85\xcc\x62\x85\x44\x85\x20\xd7\x00\x1f\xdd\xfc\xbc\x9c\x4a\x85\xb4\xd2\xbc\xe4\x92\xcc\xfc\x3c\x3d\x2e\x40\x00\x00\x00\xff\xff\x25\x68\x02\x02\x61\x00\x00\x00")

func replClsMdBytes() ([]byte, error) {
	return bindataRead(
		_replClsMd,
		"repl-cls.md",
	)
}

func replClsMd() (*asset, error) {
	bytes, err := replClsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-cls.md", size: 97, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replDocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x0a\xc2\x30\x10\x45\xf7\x73\x8a\x0f\xdd\x58\xd0\xde\x41\xb0\x3b\x17\x22\x5e\x60\x48\x26\x74\xa0\x9d\x04\x27\x85\xe6\xf6\xd2\x8a\x0b\xb7\xef\xf3\x1f\xaf\xc3\x29\xe6\x80\x94\xdf\x4b\x8f\xa8\x5e\x66\x6e\x8e\x98\xc3\xba\x88\x55\xae\x9a\x8d\x6e\x3f\x5c\x27\xf9\x9f\xf6\xdf\x41\xbd\x48\xd0\xa4\x12\x0f\xd3\x19\x9a\xc0\xd6\x20\x9b\x7a\xf5\x01\xaf\x49\x1d\xea\x60\x3c\xc7\xc7\xfd\x92\x6d\x6e\x48\xab\x85\xdd\x31\x10\x75\x1d\xae\x86\x71\xe3\xa5\xcc\x42\x84\x6f\x13\x7b\xb3\xd0\xd3\x27\x00\x00\xff\xff\x14\x0b\x79\x2c\xa2\x00\x00\x00")

func replDocMdBytes() ([]byte, error) {
	return bindataRead(
		_replDocMd,
		"repl-doc.md",
	)
}

func replDocMd() (*asset, error) {
	bytes, err := replDocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-doc.md", size: 162, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replHelpMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4b\x8e\xdb\x30\x10\x44\xf7\x3a\x45\x2d\x65\x21\xf0\x01\xb2\x0b\x1c\xef\xb2\x48\x82\x1c\xc0\x14\x55\xb2\x08\x34\x9b\x0c\x9b\xf4\xe7\xf6\x03\xc9\x33\xc6\x18\xd3\xdb\x7a\xaf\xba\x86\x7e\xa1\xe4\xdd\x80\xc7\xfd\x0c\x96\xc5\xdd\x51\x97\x60\x58\x13\x44\x9a\xb9\x33\xbb\xa1\x9f\x92\xc7\x9c\x4a\xdc\xe0\x0f\x70\x4a\xbe\x45\x6a\x75\x35\x24\xdd\xe3\x78\x73\x31\x0b\xbf\xe3\xb4\xe1\xce\xee\xea\x77\xa7\x6e\xe8\x9b\x11\x6a\xef\x7f\x0e\x8b\xd3\x33\xe1\x5b\x29\xd4\x0a\x75\x91\x96\x9d\xe7\x8b\xbf\x1a\x73\x4a\x9b\xed\xc5\x9e\x13\x71\x10\xba\x82\xba\x10\xe6\x0b\xa9\xdd\xd0\xff\x6f\xa1\x3e\x81\x3f\x2d\xd4\x2d\xfe\x7b\xfc\xfd\xab\xeb\xfe\x2d\x44\x2e\x29\xe6\x8a\x91\x92\xae\x08\x13\xb5\x86\x39\xd0\x36\xea\xcb\x8a\x6f\x98\x93\x48\xba\x72\xc2\x78\xdf\x10\x6d\x71\x64\x41\x9a\xc1\x5b\x2e\x34\x0b\x49\x57\xd9\x55\x5c\x83\x08\x16\x77\x21\x46\x52\xc1\x8b\x93\xe6\x2a\x27\x04\x7d\x69\x5f\xb7\xc0\x1e\xea\x1e\x3f\x60\x41\xcf\xc2\x4f\x7d\xf0\x4e\x61\xd9\x29\x62\x93\x1a\xb2\x10\x12\x94\xb6\xef\xde\x02\x00\x00\xff\xff\x30\x28\x56\x7c\xa3\x01\x00\x00")

func replHelpMdBytes() ([]byte, error) {
	return bindataRead(
		_replHelpMd,
		"repl-help.md",
	)
}

func replHelpMd() (*asset, error) {
	bytes, err := replHelpMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-help.md", size: 419, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replQuitMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xd0\x28\x2c\xcd\x2c\xd1\x54\x00\x91\xc5\x0a\x25\x19\xa9\x0a\x41\xae\x01\x3e\x5c\x9e\xb9\xb9\xa9\x29\x99\x89\x25\xa9\x39\x95\x0a\xa9\x15\x30\xa9\xe0\x82\xd2\x92\x92\xd4\x22\xb0\x12\x3d\x85\x90\x8c\xcc\x62\x85\xcc\x62\x85\x44\x30\x5f\x37\x3f\x2f\xa7\x52\x21\xad\x34\x2f\xb9\x24\x33\x3f\x4f\x8f\x0b\x10\x00\x00\xff\xff\xe9\x14\xcc\xb5\x5a\x00\x00\x00")

func replQuitMdBytes() ([]byte, error) {
	return bindataRead(
		_replQuitMd,
		"repl-quit.md",
	)
}

func replQuitMd() (*asset, error) {
	bytes, err := replQuitMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-quit.md", size: 90, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _replUseMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcd\x41\x0a\xc2\x40\x0c\x46\xe1\x7d\x4e\xf1\xc3\x6c\xec\xc2\xde\x41\xa4\x3b\x17\x22\x5e\x20\x84\xd4\x19\x68\x93\xd2\x64\xa0\xde\xde\x85\x82\xdb\xc7\x83\xaf\xe0\xd4\x43\x61\x31\x40\x2a\xdb\x4b\x03\xc6\xab\xc6\xc6\xa2\x74\xfd\x95\xac\x0a\xe9\xfb\xae\x96\x10\xb7\xd4\x23\xff\xd7\x88\x67\x6d\x81\x16\x60\x3c\xa6\xfb\xed\xec\xb6\xbc\x31\x77\x93\x6c\x6e\x23\x51\x29\xb8\x18\xa6\x83\xd7\x6d\x51\x22\x7c\xc5\xd9\x7d\xa0\x4f\x00\x00\x00\xff\xff\xc5\x9a\xf9\x8e\x7e\x00\x00\x00")

func replUseMdBytes() ([]byte, error) {
	return bindataRead(
		_replUseMd,
		"repl-use.md",
	)
}

func replUseMd() (*asset, error) {
	bytes, err := replUseMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "repl-use.md", size: 126, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _restMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xbd\x4e\xc3\x30\x14\x85\x77\x3f\xc5\x91\x3a\x90\x2c\x19\xa0\x42\x74\x42\x0c\x0c\xec\xec\xb5\xe3\x1c\x13\x8b\x5b\xbb\xf1\x0f\xcd\xe3\xa3\xba\x28\x15\x9b\xe5\x73\xbf\xa3\xfb\xdd\x1d\xba\xc4\x5c\x90\xb9\xf4\x48\x2c\x35\x85\x8c\x32\x13\xed\x37\xba\xf6\xce\x5c\x2a\x83\xa5\xfa\x9c\x7d\x86\xab\xc1\x16\x1f\x03\x2e\x5e\xe4\x8f\x81\xd9\x86\x50\x66\x53\xc0\xd5\x4a\x9d\x78\xeb\x72\x3e\xe5\x02\x0a\x4f\x0c\xf7\xd2\x33\xad\x77\x9e\xd3\x46\x0e\xf8\x28\xb8\xc4\x2a\x13\x46\x62\x64\xa0\xf3\xd6\x1b\x41\x89\xb0\x33\xed\x37\x5c\x4c\x30\xf8\x31\xe2\xef\x14\x6a\xf6\xe1\x0b\xba\xcb\x5c\x5e\x9b\x87\xc6\x48\x17\x13\x61\x8d\x48\xcb\xda\x02\x1a\x31\x41\x5f\xbd\xf4\xa0\xd4\x6e\x87\xb7\x80\xf7\xd5\x9c\xce\x42\xa5\x80\x6e\xa2\xc3\x8a\x87\xee\x70\xc0\xf3\x1e\x4f\x8f\xd8\xbf\xf4\xfd\x35\x68\xa7\x58\x7b\xa5\xd0\xfc\x79\x63\xfe\xe9\x1f\xbb\x0d\x39\x0e\xea\x37\x00\x00\xff\xff\x2d\x36\x71\x7f\x55\x01\x00\x00")

func restMdBytes() ([]byte, error) {
	return bindataRead(
		_restMd,
		"rest.md",
	)
}

func restMd() (*asset, error) {
	bytes, err := restMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rest.md", size: 341, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toAssocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xcd\x6a\xeb\x40\x0c\x85\xf7\xf3\x14\x07\x67\x71\x63\x6e\x1a\x0a\xdd\x79\xd7\x45\x1f\xa1\x74\x51\x0a\x51\x67\xe4\x58\x74\x7e\xdc\x19\x4d\x6c\xe7\xe9\x8b\x5d\x1a\x0a\x5d\x09\xa1\xf3\x7d\x12\xda\x61\xaf\xe9\x8e\x4a\x49\x16\x85\x3f\xff\xb7\xb0\x29\x5e\x38\x6b\x59\xdb\xca\xd1\x72\x81\x26\x50\xc4\x16\x12\x52\xb9\x30\x8a\xe6\x6a\xb5\x66\x36\x2f\xe2\xfd\xca\x58\x52\x8e\xa4\x0c\x42\x61\x45\xea\x7f\xf1\x12\xff\x18\x8e\x78\x8e\x5e\x3e\x18\x3a\xac\x36\x8a\x8e\xb2\xc3\xe9\x5b\x74\x42\x5f\xa3\x55\x49\xf1\x80\x69\x10\x3b\x40\x0a\x3c\x5d\xc5\x2f\xb0\x29\x8c\x55\xd9\x1d\x36\x32\x73\xa9\x7e\xdb\xa6\x83\x94\x1b\x86\x69\xbd\xea\x9d\x11\x48\x39\x0b\x79\xb9\xb2\x83\x84\xc0\x4e\x48\xd9\x2f\x47\x63\x76\x3b\x3c\x46\x3c\xcd\x14\x46\xcf\xc6\x00\x7b\xc7\x3d\x66\xbc\x76\x91\x02\xa3\x29\x63\x55\xe5\xdc\xa0\xa3\x33\xe3\xfe\xf8\xf0\xd6\xfe\x84\x16\xfc\xdb\x77\x13\xcb\x79\x50\x34\x7e\x2d\x4d\xbb\x0d\x6f\xaf\x9c\xb1\xb4\xe6\x2b\x00\x00\xff\xff\xf9\x91\x79\x5e\x5c\x01\x00\x00")

func toAssocMdBytes() ([]byte, error) {
	return bindataRead(
		_toAssocMd,
		"to-assoc.md",
	)
}

func toAssocMd() (*asset, error) {
	bytes, err := toAssocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "to-assoc.md", size: 348, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toListMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x4d\x4e\xc3\x40\x0c\x85\xf7\x73\x8a\x27\x65\xc1\x8c\x5a\x2a\x01\xbd\x00\x0b\x8e\x80\x58\x54\x95\x6a\x66\x1c\xc5\x62\x7e\x42\xc6\xa1\x49\x4f\x8f\x12\x20\x62\xe9\xe7\xef\xb3\x2d\x37\xb0\x5a\xee\xa3\x54\x45\xe5\xcf\x9d\x83\x2f\xf9\x8b\x07\xad\x4b\x39\x72\xf6\x5c\xa1\x05\x84\x05\x31\x6f\x12\xe3\x42\x78\x52\xce\xa4\x0c\x42\x65\x45\x69\xff\xd1\x92\x37\xfe\x80\xd7\x1c\xe5\x83\xa1\x1d\xa3\x2a\xe5\x40\x43\xc0\xe5\x67\xc0\x05\xed\x98\xbd\x4a\xc9\x7b\x5c\x3b\xf1\x1d\xa4\x22\xd2\x4d\xe2\x0c\x5f\x52\x3f\x2a\x87\xfd\x6a\x0e\x5c\xc7\xb8\x6e\xd1\x4e\xea\xa6\xe1\xba\x5c\xf3\xce\x48\xa4\x3c\x08\x45\xb9\x71\x80\xa4\xc4\x41\x48\x39\xce\x07\x63\x9a\x06\xcf\x19\x2f\x13\xa5\x3e\xb2\x31\x80\x0d\xdc\x62\xc2\xe9\x01\x8f\x78\xc2\xf1\xec\xfe\xb2\xd9\x00\x80\x4d\xd4\xc3\xb6\x19\xa7\xe9\x0c\xbb\xc3\x84\xa3\x73\x6b\xe7\xce\xfe\x2a\x6e\x0d\xb6\xaf\x4d\x98\x9d\xf9\x0e\x00\x00\xff\xff\x91\xac\x17\x34\x46\x01\x00\x00")

func toListMdBytes() ([]byte, error) {
	return bindataRead(
		_toListMd,
		"to-list.md",
	)
}

func toListMd() (*asset, error) {
	bytes, err := toListMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "to-list.md", size: 326, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toVectorMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x8a\x5f\xda\x81\x74\x8c\x49\x0c\x5e\x80\x03\x8f\x80\x38\x20\xa4\x99\xc4\x55\x2d\x12\xa7\x34\xee\xd6\xed\xe9\x51\x3b\x09\x7a\xb4\xff\xef\xb3\x2d\x6f\xe0\xad\x3c\x9c\x38\x58\x19\x50\xf9\xe7\xbe\x41\x28\x7a\xe2\xc1\xea\x5c\x8e\xac\x81\x2b\xac\x80\x70\x83\xdc\xbb\xa4\x34\x33\x81\x8c\x95\x8c\x41\xa8\x6c\x28\xed\x8a\x17\x5d\x19\x7b\xbc\x69\x92\x6f\x86\x75\x8c\x6a\xa4\x91\x86\x88\xe3\x6d\xc4\x11\xed\xa8\xc1\xa4\xe8\x0e\xe7\x4e\x42\x07\xa9\x48\x74\x95\x74\x41\x28\xb9\x1f\x8d\xe3\x6e\x31\x07\xae\x63\x5a\xf6\x58\x27\xf5\x4f\xc3\x79\xbe\xe7\x8b\x91\xc9\x78\x10\x4a\x72\xe5\x08\xc9\x99\xa3\x90\x71\xba\xec\x9d\xdb\x6c\xf0\xa2\x78\x9d\x28\xf7\x89\x9d\x03\x7c\xe4\x16\x93\x03\x00\x9f\xa9\x87\x6f\x15\x1f\xd3\x27\xfc\x76\x8b\x09\x87\xa6\x59\xa2\x3b\xff\x88\x03\x9e\xf0\xdc\x2c\x8d\xd5\xa3\xfe\x13\x4c\x8d\xfb\x0d\x00\x00\xff\xff\x7e\xf3\xf4\x7f\x44\x01\x00\x00")

func toVectorMdBytes() ([]byte, error) {
	return bindataRead(
		_toVectorMd,
		"to-vector.md",
	)
}

func toVectorMd() (*asset, error) {
	bytes, err := toVectorMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "to-vector.md", size: 324, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vectorMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x8a\xeb\x30\x10\x44\xf7\x3a\x45\x91\x6c\xe2\xc0\xcf\x1d\xfe\x62\x6e\x30\x30\xeb\x1e\xa9\x84\x04\x72\xcb\xa8\x3b\x8e\x7d\xfb\x01\xc7\xb3\x98\x6d\xbd\xe2\xf1\xae\xb8\xad\x8c\xde\x07\x72\x1f\xf3\xfd\x3e\x21\x0e\x8a\xd3\x20\x50\xbe\xf0\x86\xe1\xab\xb6\x76\x92\x3f\x00\xaf\xd2\x8d\x60\xe3\x4c\x75\x83\x0c\xc2\x0b\xc1\x55\xda\x53\x9c\xe9\xd0\x1a\x96\xd1\xd7\x9a\x98\x1e\xf8\x2c\xd5\x90\x9f\x1a\xbd\x76\x45\x35\x68\x47\xaa\x39\x73\x50\x1d\x5e\x44\x0f\xc1\xa9\x6f\xd5\x39\xa4\xc1\x76\x75\xd9\xc0\x2d\x72\x39\x5e\x8e\xea\x88\xa2\xf8\x26\xfc\xe8\x4a\xa8\x0a\x41\xae\xc3\xfc\x5f\x6c\x62\x86\x2c\x56\x6a\xd7\x47\x08\xd7\x2b\xfe\x2b\x3e\x36\x99\x97\xc6\x10\x80\x5b\x62\xc6\x86\x4b\x61\x6b\xfd\x32\xfd\x2e\x3b\x2e\x5e\x38\xf8\x5e\xce\x88\x0d\xfb\x14\x7e\x02\x00\x00\xff\xff\xaf\x7d\x77\x62\x29\x01\x00\x00")

func vectorMdBytes() ([]byte, error) {
	return bindataRead(
		_vectorMd,
		"vector.md",
	)
}

func vectorMd() (*asset, error) {
	bytes, err := vectorMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vector.md", size: 297, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _withMetaMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\x03\x31\x10\x44\x7b\x7f\xc5\x28\x69\x72\x51\x48\x41\x49\x47\x41\x41\x4f\x87\x28\x36\xf6\x3a\x5e\xe9\x6e\x7d\xdc\xae\x93\x48\x88\x7f\x47\x77\x89\x08\xa2\x1d\x7b\xb4\xef\xcd\x1a\x9b\xb3\x78\x79\x18\xd8\x09\xb9\x4e\x03\x06\x1a\x47\x4e\x1d\xc8\x9d\x62\x61\xc3\xfc\x94\xc8\x09\x5e\x71\xfd\x13\x5e\x33\xbc\x30\x6c\xe4\x28\x59\x38\x5d\x9b\x62\x88\x34\xd2\xa1\x67\xd4\x8c\x03\x8b\x1e\x41\xaa\xd5\xc9\x39\xed\xe0\x45\x0c\xb9\x69\x74\xa9\x8a\xb3\xf4\x3d\x26\xf6\x36\x29\x08\xca\x67\x88\x9a\x93\xc6\xa5\xec\x85\x1c\x27\xea\x1b\x63\xc6\xfb\x77\xed\x97\xe8\xc6\x98\xf6\x78\x2b\x7c\x8f\xc5\x30\x4e\xf5\x24\x89\x13\x44\x97\xf2\x02\x58\x33\xe8\xe6\x07\xe3\xcf\xc6\x1a\x79\x07\x6b\xb1\x80\x0c\xa4\x20\xb3\x1a\x85\x5c\x4e\x0c\xf3\xa9\x45\x6f\x13\xef\x43\x58\xaf\xf1\xac\x78\xb9\xd0\x30\xf6\x1c\x02\xfe\x8c\x16\x00\x60\x93\x15\xef\x97\x0f\x6c\xb6\x5b\x5c\xf0\xd8\x75\x4b\xfa\xf5\x94\x6a\x04\x56\x74\xb7\x5e\xbc\x52\x6d\x87\x9e\x6d\x1e\x44\x8f\xb6\xfa\xee\xc2\x4f\x00\x00\x00\xff\xff\x3d\x62\xb0\x57\x86\x01\x00\x00")

func withMetaMdBytes() ([]byte, error) {
	return bindataRead(
		_withMetaMd,
		"with-meta.md",
	)
}

func withMetaMd() (*asset, error) {
	bytes, err := withMetaMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "with-meta.md", size: 390, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _withNsMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x6e\xf2\x40\x10\x84\x7b\x3f\xc5\xc8\x34\xa0\xff\x07\x29\x29\xe9\x52\x50\xa4\xcf\x0b\x2c\xbe\x31\x9c\x74\xde\xb3\x6e\xd7\xc1\xbc\x7d\xc4\x29\xd8\x49\x91\xf6\xdb\x6f\x47\xa3\xd9\x60\x7b\x8b\x7e\xdd\xab\x41\x65\x20\xfa\x5c\x86\x7f\x3b\xf0\x53\xd2\x24\x4e\xab\xc0\x20\x17\x89\x6a\x0e\xa9\x96\x8d\xd2\xb1\x39\x2d\x8e\xc0\xe8\xc8\xfd\xb7\x1c\x15\x7e\x25\xba\xac\xce\xb9\x72\x81\x8d\xec\x62\x1f\x19\xd6\x80\x03\xde\xfb\x2a\x2e\x04\x21\xd3\xa0\xd9\x21\xa9\x50\xc2\x1d\x9c\xa3\xf9\x7f\x44\xc7\x2d\xa6\x84\x33\xd1\x15\x8a\x33\xe0\xcc\x3e\x17\x3e\x8b\x46\xbd\xd4\xa8\x5a\xe0\x80\x8f\xeb\x72\x61\x40\xa1\x4d\xa9\xf6\x78\x28\x49\xcc\xab\xb7\x44\x16\xfa\x54\x94\xe1\xd0\x34\x9b\x0d\xde\x14\xa7\x59\x86\x31\xb1\x69\x80\x6d\x60\x8f\x19\x6d\x9e\xdc\x62\xe0\xef\xbe\xed\xee\x61\x3c\xf7\x1b\xee\xfb\x75\x1c\x60\xfd\x8d\xfa\xc7\x2b\xb0\x1d\x8b\xa2\x1d\x4b\x54\xc7\xcb\x11\x2d\xe6\x5d\xcd\xfc\x81\x5f\x8f\x0f\xda\x7c\x05\x00\x00\xff\xff\x54\x6c\xbd\xbf\xa9\x01\x00\x00")

func withNsMdBytes() ([]byte, error) {
	return bindataRead(
		_withNsMd,
		"with-ns.md",
	)
}

func withNsMd() (*asset, error) {
	bytes, err := withNsMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "with-ns.md", size: 425, mode: os.FileMode(420), modTime: time.Unix(1492031822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apply.md": applyMd,
	"assoc.md": assocMd,
	"async.md": asyncMd,
	"channel.md": channelMd,
	"concat.md": concatMd,
	"cond.md": condMd,
	"conj.md": conjMd,
	"cons.md": consMd,
	"def.md": defMd,
	"defn.md": defnMd,
	"do.md": doMd,
	"eq.md": eqMd,
	"filter.md": filterMd,
	"first.md": firstMd,
	"fn.md": fnMd,
	"future.md": futureMd,
	"has-meta.md": hasMetaMd,
	"if.md": ifMd,
	"is-assoc.md": isAssocMd,
	"is-list.md": isListMd,
	"is-mapped.md": isMappedMd,
	"is-nil.md": isNilMd,
	"is-seq.md": isSeqMd,
	"is-vector.md": isVectorMd,
	"len.md": lenMd,
	"let.md": letMd,
	"list.md": listMd,
	"map.md": mapMd,
	"meta.md": metaMd,
	"ns.md": nsMd,
	"nth.md": nthMd,
	"promise.md": promiseMd,
	"quote.md": quoteMd,
	"repl-cls.md": replClsMd,
	"repl-doc.md": replDocMd,
	"repl-help.md": replHelpMd,
	"repl-quit.md": replQuitMd,
	"repl-use.md": replUseMd,
	"rest.md": restMd,
	"to-assoc.md": toAssocMd,
	"to-list.md": toListMd,
	"to-vector.md": toVectorMd,
	"vector.md": vectorMd,
	"with-meta.md": withMetaMd,
	"with-ns.md": withNsMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"apply.md": &bintree{applyMd, map[string]*bintree{}},
	"assoc.md": &bintree{assocMd, map[string]*bintree{}},
	"async.md": &bintree{asyncMd, map[string]*bintree{}},
	"channel.md": &bintree{channelMd, map[string]*bintree{}},
	"concat.md": &bintree{concatMd, map[string]*bintree{}},
	"cond.md": &bintree{condMd, map[string]*bintree{}},
	"conj.md": &bintree{conjMd, map[string]*bintree{}},
	"cons.md": &bintree{consMd, map[string]*bintree{}},
	"def.md": &bintree{defMd, map[string]*bintree{}},
	"defn.md": &bintree{defnMd, map[string]*bintree{}},
	"do.md": &bintree{doMd, map[string]*bintree{}},
	"eq.md": &bintree{eqMd, map[string]*bintree{}},
	"filter.md": &bintree{filterMd, map[string]*bintree{}},
	"first.md": &bintree{firstMd, map[string]*bintree{}},
	"fn.md": &bintree{fnMd, map[string]*bintree{}},
	"future.md": &bintree{futureMd, map[string]*bintree{}},
	"has-meta.md": &bintree{hasMetaMd, map[string]*bintree{}},
	"if.md": &bintree{ifMd, map[string]*bintree{}},
	"is-assoc.md": &bintree{isAssocMd, map[string]*bintree{}},
	"is-list.md": &bintree{isListMd, map[string]*bintree{}},
	"is-mapped.md": &bintree{isMappedMd, map[string]*bintree{}},
	"is-nil.md": &bintree{isNilMd, map[string]*bintree{}},
	"is-seq.md": &bintree{isSeqMd, map[string]*bintree{}},
	"is-vector.md": &bintree{isVectorMd, map[string]*bintree{}},
	"len.md": &bintree{lenMd, map[string]*bintree{}},
	"let.md": &bintree{letMd, map[string]*bintree{}},
	"list.md": &bintree{listMd, map[string]*bintree{}},
	"map.md": &bintree{mapMd, map[string]*bintree{}},
	"meta.md": &bintree{metaMd, map[string]*bintree{}},
	"ns.md": &bintree{nsMd, map[string]*bintree{}},
	"nth.md": &bintree{nthMd, map[string]*bintree{}},
	"promise.md": &bintree{promiseMd, map[string]*bintree{}},
	"quote.md": &bintree{quoteMd, map[string]*bintree{}},
	"repl-cls.md": &bintree{replClsMd, map[string]*bintree{}},
	"repl-doc.md": &bintree{replDocMd, map[string]*bintree{}},
	"repl-help.md": &bintree{replHelpMd, map[string]*bintree{}},
	"repl-quit.md": &bintree{replQuitMd, map[string]*bintree{}},
	"repl-use.md": &bintree{replUseMd, map[string]*bintree{}},
	"rest.md": &bintree{restMd, map[string]*bintree{}},
	"to-assoc.md": &bintree{toAssocMd, map[string]*bintree{}},
	"to-list.md": &bintree{toListMd, map[string]*bintree{}},
	"to-vector.md": &bintree{toVectorMd, map[string]*bintree{}},
	"vector.md": &bintree{vectorMd, map[string]*bintree{}},
	"with-meta.md": &bintree{withMetaMd, map[string]*bintree{}},
	"with-ns.md": &bintree{withNsMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

