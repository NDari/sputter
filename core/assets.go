// Code generated by go-bindata.
// sources:
// core/01_branching.lisp
// core/02_definitions.lisp
// core/03_sequences.lisp
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_branchingLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x4a\x03\x31\x10\x86\xef\x79\x8a\x9f\x1e\xea\xe4\x50\xb0\xd7\x15\xf1\x41\xc4\xc3\x36\x99\xb5\x81\x38\xa3\x99\x14\x11\xf1\xdd\x25\xe9\xba\xd5\x3d\x09\xdd\xc3\x12\xbe\x7f\x92\xef\x4f\xee\x60\xaf\xa7\x5a\xb9\x20\x68\xe1\x01\x87\x32\x4a\x38\x26\x79\x76\x8e\x22\x4f\x2f\x63\x28\x8a\xf7\x23\x8b\x03\x3e\x87\xa8\x61\x37\x9a\x71\xc5\xa6\xb1\xcd\x97\x03\x1e\x2b\x5b\xc5\x16\x07\x8d\x1f\x4f\x0e\xa0\x9c\xac\xe2\x66\x3e\x76\x48\x13\xfa\x00\x05\x15\xbb\xe0\xa8\x7d\x83\xf7\x7e\x2d\xda\x89\xd6\x6b\x65\x92\xf2\xff\x84\x41\x25\xae\x65\x8d\x9d\x65\x5b\x84\x3c\x9e\x8c\xad\xab\x5a\x09\x90\xf1\xdb\xc3\x0f\xf6\x0e\x00\x28\x4d\xa0\x7b\xec\x41\x99\x65\x89\xce\x19\x40\x33\xc0\xed\x42\xd6\x9d\x67\xfe\x67\xf6\xb2\xde\xfb\x5f\x79\xbf\x52\x2b\x08\x2a\xfd\x55\xfb\x7f\x71\xf6\xcf\x7d\x07\x00\x00\xff\xff\x53\x63\xae\x16\xd4\x01\x00\x00")

func _01_branchingLispBytes() ([]byte, error) {
	return bindataRead(
		__01_branchingLisp,
		"01_branching.lisp",
	)
}

func _01_branchingLisp() (*asset, error) {
	bytes, err := _01_branchingLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_branching.lisp", size: 468, mode: os.FileMode(420), modTime: time.Unix(1495357640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_definitionsLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x41\x0a\x02\x31\x0c\x85\xe1\x7d\x4e\xf1\x98\x85\xb6\x0b\x2f\x50\x8f\x22\x2e\x4a\x9b\x42\xc1\x49\xa4\x89\x2b\xf1\xee\x12\x19\x70\xfb\xbf\xc7\x77\x85\x3d\x5f\xee\xbc\xd0\x74\x71\x41\xe7\x31\x65\xfa\x54\x31\xa2\xd4\x79\xec\xb5\x2d\x8d\x2c\x04\xbc\x4b\xd7\x76\xa9\x66\xec\xd8\xa2\x6d\x1f\x02\x6e\x52\x77\xc6\x09\x8b\xcd\xef\x04\xa4\xc7\x34\xc7\xf9\x80\x4b\xe7\x81\x78\x10\x00\xa4\xa6\x62\xff\x6d\xc8\x51\x7e\x44\x00\x39\xe7\x4c\xdf\x00\x00\x00\xff\xff\x72\x1f\xb6\xca\x96\x00\x00\x00")

func _02_definitionsLispBytes() ([]byte, error) {
	return bindataRead(
		__02_definitionsLisp,
		"02_definitions.lisp",
	)
}

func _02_definitionsLisp() (*asset, error) {
	bytes, err := _02_definitionsLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_definitions.lisp", size: 150, mode: os.FileMode(420), modTime: time.Unix(1495292207, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_sequencesLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x4d\xaa\xc2\x40\x10\x84\xf7\x73\x8a\x22\x8b\xf7\x92\x85\x17\x88\x47\x11\x17\x43\xa7\x03\x42\x32\x3d\x4e\x77\x04\x11\xef\x2e\x43\xc6\x1f\x24\x20\xb3\xac\x2a\xf8\xea\xdb\x43\xe3\x62\xc6\x09\x24\x89\x7b\x28\x9f\x17\x0e\xc4\xea\x5c\x3b\xf0\x38\x7b\x4a\x02\x93\x9d\x57\x15\x72\xc0\xad\x1f\x84\x72\x62\x43\xf3\xec\x9b\xbb\x03\x0e\x7f\x18\x25\xcd\x7a\x74\x40\x3b\x9d\xd4\xf0\x5f\xd0\xbd\x8f\x71\xba\x7e\xc4\xc2\x02\x5a\x92\xa0\xef\x81\x24\x90\xb7\x15\xd3\x75\xdd\x97\x42\x66\x6e\x18\xe4\xba\x52\xa0\x90\x2a\xff\x2f\x4c\x26\x69\xc3\x60\x1d\x2a\x1d\x5e\xb4\x9f\x16\x8f\x00\x00\x00\xff\xff\xb8\xbe\x56\xa8\xa3\x01\x00\x00")

func _03_sequencesLispBytes() ([]byte, error) {
	return bindataRead(
		__03_sequencesLisp,
		"03_sequences.lisp",
	)
}

func _03_sequencesLisp() (*asset, error) {
	bytes, err := _03_sequencesLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_sequences.lisp", size: 419, mode: os.FileMode(420), modTime: time.Unix(1495357306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_branching.lisp": _01_branchingLisp,
	"02_definitions.lisp": _02_definitionsLisp,
	"03_sequences.lisp": _03_sequencesLisp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_branching.lisp": &bintree{_01_branchingLisp, map[string]*bintree{}},
	"02_definitions.lisp": &bintree{_02_definitionsLisp, map[string]*bintree{}},
	"03_sequences.lisp": &bintree{_03_sequencesLisp, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

