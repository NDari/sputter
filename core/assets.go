// Code generated by go-bindata.
// sources:
// core/01_branching.lisp
// core/02_definitions.lisp
// core/03_sequences.lisp
// DO NOT EDIT!

package core

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __01_branchingLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x8b\xc3\x20\x14\x84\xef\xfe\x8a\x21\x87\xec\xf3\x10\xd8\x5c\x03\xcb\xfe\x90\x65\x0f\x59\x7d\x61\x05\xab\x6d\x9e\xa1\x94\xd2\xff\x5e\xb4\x69\xd2\xf4\x14\x0f\x22\xdf\x3c\x67\x46\xc9\xf2\x70\xe8\xcd\x18\x71\xfe\xe7\xa0\x80\x9f\xc4\x92\x50\xe3\x2f\xda\xcb\xaf\x02\xc8\x3b\x49\xf8\x90\xe3\x94\x12\x8f\x9d\x1b\x50\x06\xc8\xc4\x20\x2b\xb6\xb1\x5c\xd0\x5a\x2b\xb5\xb5\x6c\x42\x4c\xfb\x6d\x83\xf3\xfb\xac\x4d\x0c\x56\x01\xd7\xce\x46\xd3\xf4\x22\x9c\x50\x65\x56\xdd\x72\x58\x0d\xe3\xfb\x49\x58\x4a\x54\xae\x01\x12\x3e\x7d\x3f\xb1\x56\x00\x40\x6e\x00\x7d\xa1\x05\x79\x0e\x8b\xf4\xd0\x00\x9a\x01\x3e\x17\xf2\xde\x79\xe6\x9b\xd9\xf5\xdc\xea\x17\xbd\x3c\x29\x17\x04\x8d\xe5\xff\xca\xbe\x64\x96\xa5\xee\x01\x00\x00\xff\xff\x15\x5c\xb1\x7a\x8d\x01\x00\x00")

func _01_branchingLispBytes() ([]byte, error) {
	return bindataRead(
		__01_branchingLisp,
		"01_branching.lisp",
	)
}

func _01_branchingLisp() (*asset, error) {
	bytes, err := _01_branchingLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "01_branching.lisp", size: 397, mode: os.FileMode(420), modTime: time.Unix(1495288829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __02_definitionsLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x0a\x02\x31\x10\x85\xe1\x7e\x4e\xf1\xb3\x85\x26\x85\x17\xd8\xab\x88\x45\x48\x26\x20\x98\x44\x32\x63\x25\xde\x5d\x22\xc2\xb6\xff\x7b\x7c\xa1\x68\x6d\x29\xcf\x41\xd1\xda\x05\xde\x7b\x19\xf9\x92\xcc\xd4\xd9\x56\xdb\x3e\x02\xd7\x9e\x9a\x72\x62\xaa\xf9\x4d\x20\x3c\xee\xe6\x9c\xed\xf9\x72\xd7\xb9\x17\xad\xac\x87\x00\x84\x3c\xba\x1d\x5b\xed\xff\xf2\x23\x16\x10\x63\x8c\xf2\x0d\x00\x00\xff\xff\x14\x6c\xd1\xe8\x79\x00\x00\x00")

func _02_definitionsLispBytes() ([]byte, error) {
	return bindataRead(
		__02_definitionsLisp,
		"02_definitions.lisp",
	)
}

func _02_definitionsLisp() (*asset, error) {
	bytes, err := _02_definitionsLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "02_definitions.lisp", size: 121, mode: os.FileMode(420), modTime: time.Unix(1495289798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __03_sequencesLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\xcd\x0a\xc2\x30\x10\x84\xef\xfb\x14\x43\x0f\x9a\x1c\x7c\x81\xbe\x8a\x78\x08\xdb\x14\x84\xb6\x1b\xb2\xab\x20\xe2\xbb\x4b\x68\xfd\x83\x80\xe4\x38\x33\xf0\xcd\x47\x6e\x88\xe3\x1c\x38\x0b\x4c\x0e\x41\x55\x98\x80\x7b\x3f\x08\x97\x14\x0d\xdd\xab\xef\x1e\x04\x1c\x77\x18\x25\xcf\x7a\x22\xc0\x4d\x67\x35\xec\x35\x5d\xcc\x62\xee\x43\x4a\xd3\xed\x2b\x6e\x2c\xc0\xb1\x2c\xfa\x19\x58\x16\x0e\xb6\x62\xbc\xf7\xf4\xab\x50\x98\x15\x83\x52\x37\x0a\x6c\xa4\xc6\xff\x6b\x64\x93\x5c\x31\x58\x87\x46\x87\x37\xed\xaf\xc5\x33\x00\x00\xff\xff\x1a\x4c\xf9\x1d\x89\x01\x00\x00")

func _03_sequencesLispBytes() ([]byte, error) {
	return bindataRead(
		__03_sequencesLisp,
		"03_sequences.lisp",
	)
}

func _03_sequencesLisp() (*asset, error) {
	bytes, err := _03_sequencesLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "03_sequences.lisp", size: 393, mode: os.FileMode(420), modTime: time.Unix(1495288832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"01_branching.lisp": _01_branchingLisp,
	"02_definitions.lisp": _02_definitionsLisp,
	"03_sequences.lisp": _03_sequencesLisp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"01_branching.lisp": &bintree{_01_branchingLisp, map[string]*bintree{}},
	"02_definitions.lisp": &bintree{_02_definitionsLisp, map[string]*bintree{}},
	"03_sequences.lisp": &bintree{_03_sequencesLisp, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

